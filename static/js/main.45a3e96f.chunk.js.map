{"version":3,"sources":["constants/index.tsx","reportWebVitals.ts","abi/Continents.js","utils/getLibrary.ts","state/actions/actionTypes.ts","state/reducers/collections.ts","state/reducers/collection.ts","state/reducers/assets.ts","state/reducers/asset.ts","store.ts","connectors/index.tsx","constants/routes.tsx","constants/navigation.tsx","components/ConnectionBadge/index.tsx","components/ConnectionBadge/ConnectionBadge.tsx","components/DarkToggle/index.tsx","components/DarkToggle/DarkToggle.tsx","hooks/useDark.tsx","components/SocialLink/index.tsx","components/SocialLink/SocialLink.tsx","components/Footer/index.tsx","components/Footer/Footer.tsx","constants/text.tsx","components/Button/index.tsx","components/Button/Button.tsx","components/OnboardingButton/OnboardingButton.tsx","components/OnboardingButton/index.tsx","components/Navbar/index.tsx","components/Navbar/Navbar.tsx","components/MenuClosedIcon/index.tsx","components/MenuClosedIcon/MenuClosedIcon.tsx","components/MenuOpenIcon/index.tsx","components/MenuOpenIcon/MenuOpenIcon.tsx","components/Sidebar/index.tsx","components/Sidebar/Sidebar.tsx","utils/convertIpfsUrl.ts","state/hooks.ts","ContentWrapper.js","components/UserNftList/UserNftList.tsx","components/UserNftList/index.tsx","components/WalletAddress/index.tsx","components/WalletAddress/WalletAddress.tsx","components/ChainAddButton/ChainAddButton.tsx","components/ChainAddButton/index.tsx","components/NetworkSwitch/NetworkSwitch.tsx","components/NetworkSwitch/index.tsx","pages/AccountPage/AccountPage.tsx","pages/AccountPage/index.tsx","state/actions/asset.ts","components/Disclosures/AttributeDisclosure.tsx","components/Disclosures/DetailsDisclosure.tsx","assets/Avalanche_AVAX_RedWhite.png","components/Disclosures/ListingDisclosure.tsx","assets/globe.png","assets/logo.png","assets/marker.svg","components/AssetView/AssetView.tsx","components/AssetView/index.tsx","state/asyncActions/asset.ts","http/index.ts","components/CardEmpty/index.tsx","components/CardEmpty/CardEmpty.tsx","components/AssetCard/index.tsx","components/AssetCard/AssetCard.tsx","components/AssetGrid/index.tsx","components/AssetGrid/AssetGrid.tsx","components/Disclosures/CollectionDisclosure.tsx","pages/AssetPage/AssetPage.tsx","state/actions/collection.ts","state/asyncActions/collection.ts","pages/AssetPage/index.tsx","state/actions/collections.ts","components/CollectionCard/index.tsx","components/CollectionCard/CollectionCard.tsx","components/CollectionGrid/CollectionGrid.tsx","components/CollectionGrid/index.tsx","state/asyncActions/collections.ts","pages/CollectionsPage/CollectionsPage.tsx","pages/CollectionsPage/index.tsx","pages/CollectionPage/CollectionPage.tsx","pages/CollectionPage/index.tsx","components/LocationButton/index.tsx","components/LocationButton/LocationButton.tsx","components/CreateItemForm/CreateItemForm.tsx","components/CreateItemForm/index.tsx","pages/CreatorPage/CreatorPage.tsx","pages/CreatorPage/index.tsx","components/LeafletMap/LeafletMap.tsx","components/LeafletMap/index.tsx","utils/classNames.ts","pages/ExplorePage/ExplorePage.tsx","pages/ExplorePage/index.tsx","data/faqs.tsx","components/FaqList/index.tsx","components/FaqList/FaqList.tsx","pages/FaqPage/index.tsx","pages/FaqPage/FaqPage.tsx","components/Hero/Hero.tsx","components/Hero/index.tsx","pages/HomePage/index.tsx","pages/HomePage/HomePage.tsx","components/AssetListItem/index.tsx","components/AssetListItem/AssetListItem.tsx","components/AssetList/index.tsx","components/AssetList/AssetList.tsx","pages/MarketplacePage/MarketplacePage.tsx","state/actions/assets.ts","data/roadmap.tsx","components/RoadmapItems/index.tsx","components/RoadmapItems/RoadmapItems.tsx","routes.tsx","pages/MarketplacePage/index.tsx","state/asyncActions/assets.ts","pages/RoadmapPage/RoadmapPage.tsx","App.tsx","hooks/useInactiveListener.tsx","hooks/useEagerConnect.tsx","index.tsx"],"names":["supportedChainIds","ChainId","AVALANCHE_MAINNET_PARAMS","chainId","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","AVALANCHE_TESTNET_PARAMS","NETWORK_LABELS","NETWORK_LABELS_SHORT","NATIVE_CURRENCY","Networks","reportWebVitals","address","abi","ERC20ABI","ContinentsAbi","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getLibrary","provider","library","Web3Provider","pollingInterval","GET_COLLECTIONS_STARTED","GET_COLLECTIONS_SUCCESS","GET_COLLECTIONS_FAILURE","GET_COLLECTION_STARTED","GET_COLLECTION_SUCCESS","GET_COLLECTION_FAILURE","GET_ASSET_STARTED","GET_ASSET_SUCCESS","GET_ASSET_FAILURE","GET_ASSETS_STARTED","GET_ASSETS_SUCCESS","GET_ASSETS_FAILURE","initialState","data","loading","error","rootReducer","combineReducers","collections","state","action","type","payload","collection","assets","asset","PERSISTED_KEYS","store","configureStore","reducer","middleware","save","states","thunk","preloadedState","load","injected","InjectedConnector","ROUTE_ACCOUNT","ROUTE_DEFAULT","ROUTE_EXPLORE","ROUTE_FAQ","ROUTE_MARKETPLACE","ROUTE_ROADMAP","navigation","href","routes","icon","HomeIcon","exact","CollectionIcon","GlobeIcon","MapIcon","QuestionMarkCircleIcon","ConnectionBadge","network","account","useState","message","setMessage","messageColor","setMessageColor","showMsg","setShowMsg","className","fill","viewBox","cx","cy","r","onClick","navigator","clipboard","writeText","setTimeout","DarkToggle","dark","setDark","useEffect","isDark","document","getElementsByTagName","classList","contains","localStorage","documentElement","toggle","useDark","toggleDark","SocialLink","title","viewbox","children","target","rel","Footer","social","show","fillRule","d","clipRule","process","TEXT_NETWORK","Button","primary","size","disabled","props","mode","join","PureOnboardingButton","label","onConnect","OnboardingButton","setLabel","setDisabled","accounts","setAccounts","onboarding","useRef","current","MetaMaskOnboarding","isMetaMaskInstalled","length","stopOnboarding","handleNewAccounts","newAccounts","a","ethereum","request","method","on","off","startOnboarding","console","Navbar","hideTitle","useWeb3React","menuOpen","setMenuOpen","Root","as","Fragment","static","open","onClose","Child","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Overlay","map","item","to","activeClassName","MenuClosedIcon","xmlns","MenuOpenIcon","Sidebar","mini","convertIpfsUrl","url","IPFSGatewayTools","convertToDesiredGateway","useAppDispatch","useDispatch","useAppSelector","useSelector","ContentWrapper","useRouteMatch","useParams","useLocation","path","PureUserNftList","items","color","idx","src","image","alt","price","UserNftList","setItems","setLoading","loadNFTs","signer","getSigner","marketContract","ethers","Contract","ContractAddresses","Marketplace","tokenContract","Continents","fetchMyNFTs","Promise","all","uri","tokenId","tokenURI","tokenUri","axios","get","meta","utils","formatUnits","toString","formattedItem","toNumber","seller","owner","WalletAddress","PureChainAddButton","ChainAddButton","params","PureNetworkSwitch","NetworkSwitch","PureAccountPage","connected","sold","owned","Group","List","tab","selected","Panels","Panel","AccountPage","setSold","fetchItemsCreated","soldItems","filter","getAssetSuccess","AttributeDisclosure","attrs","defaultOpen","attr","trait_type","value","DetailsDisclosure","contractAddress","ListingDisclosure","onCreateListing","onBuyAsset","Avax","PureAssetView","location","includes","pathname","undefined","verified","description","owner_address","AssetView","dispatch","setMarketContract","setItem","setCollection","fetch","res","json","getAsset","status","find","log","providers","JsonRpcProvider","getListingPrice","listingPrice","market","mint","val","parseUnits","createMarketItem","getListing","fetchMarketItems","mitems","nftContract","id","CardEmpty","PureAssetCard","nft","contractName","contractVerified","PureAssetGrid","index","AssetCard","CollectionDisclosure","AssetGrid","PureAssetPage","getCollectionSuccess","getCollection","AssetPage","getCollectionsSuccess","PureCollectionCard","thumbnail","PureCollectionGrid","key","CollectionCard","CollectionGrid","temp","PureCollectionsPage","CollectionsPage","PureCollectionPage","CollectionPage","LocationButton","when","setWhen","geoObj","useGeolocation","lat","lng","PureCreateItemForm","onSubmitForm","onUpdateInput","onUploadFile","file","onSubmit","e","htmlFor","onChange","rows","stroke","strokeWidth","strokeLinecap","strokeLinejoin","CreateItemForm","ipfsHttpClient","apiPath","useHistory","setName","setDescription","setFile","onCreateItemAlert","alert","URL","createObjectURL","files","event","preventDefault","PureCreatorPage","CreatorPage","LocationMarker","useMap","latlng","L","LatLng","Number","flyTo","ItemMarker","center","iconUrl","iconSize","iconAnchor","popupAnchor","shadowUrl","FeatureGroup","pathOptions","Marker","position","Popup","LeafletMap","collectibles","MapContainer","zoom","scrollWheelZoom","TileLayer","classNames","classes","Boolean","PureExplorePage","setSelected","tabIndex","ExplorePage","faqs","question","answer","FaqList","ReactHtmlParser","FaqPage","PureHero","Hero","history","push","HomePage","PureAssetListItem","PureAssetList","AssetListItem","displayOptions","ViewGridIcon","ViewListIcon","PureMarketplacePage","verifiedOnly","onFilterVerified","mem","setMem","Label","option","Option","active","checked","AssetList","getAssetsSuccess","roadmap","heading","tasks","RoadmapItems","step","stepIdx","task","taskIdx","paths","Component","filtered","App","connector","miniSidebar","setMiniSidebar","activatingConnector","setActivatingConnector","suppress","activate","window","handleConnect","handleChainChanged","handleAccountsChanged","handleNetworkChanged","networkId","removeListener","useInactiveListener","tried","setTried","isAuthorized","catch","useEagerConnect","component","Web3ProviderNetwork","createWeb3ReactRoot","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.45a3e96f.chunk.js","sourcesContent":["import ERC20ABI from \"../abi/ERC20.abi.json\";\nimport ContinentsAbi from \"../abi/Continents.abi.json\";\nimport {\n  CONTINENTS_LOCALHOST_ADDRESS,\n  CONTINENTS_FUJI_ADDRESS,\n  CONTINENTS_AVALANCHE_ADDRESS,\n} from \"../abi/Continents\";\n\nexport const NetworkContextName = \"NETWORK\";\nexport const GAS_PRICE = 225;\n// TODO: replace with HODO wallet\nexport const WALLET_ADDRESS = \"0xb935090108C3daCC47E489D2d958610E21B639D3\";\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\nexport const IPFS_GATEWAY_PREFIX = \"https://gateway.pinata.cloud\";\n\nexport const supportedChainIds = [1, 31337, 43112, 43113, 43114];\n\nexport const ChainId = {\n  ETHEREUM: 1,\n  LOCALHOST: 43112,\n  FUJI: 43113,\n  AVALANCHE: 43114,\n};\n\nexport const AVALANCHE_MAINNET_PARAMS = {\n  chainId: \"0xa86a\",\n  chainName: \"Avalanche Mainnet C-Chain\",\n  nativeCurrency: {\n    name: \"Avalanche\",\n    symbol: \"AVAX\",\n    decimals: 18,\n  },\n  rpcUrls: [\"https://api.avax.network/ext/bc/C/rpc\"],\n  blockExplorerUrls: [\"https://snowtrace.io/\"],\n};\n\nexport const AVALANCHE_TESTNET_PARAMS = {\n  chainId: \"0xa869\",\n  chainName: \"Avalanche Testnet C-Chain\",\n  nativeCurrency: {\n    name: \"Avalanche\",\n    symbol: \"AVAX\",\n    decimals: 18,\n  },\n  rpcUrls: [\"https://api.avax-test.network/ext/bc/C/rpc\"],\n  blockExplorerUrls: [\"https://testnet.snowtrace.io/\"],\n};\n\nexport const NETWORK_LABELS: {\n  [key: number]: string;\n} = {\n  [ChainId.LOCALHOST]: \"Localhost\",\n  [ChainId.ETHEREUM]: \"Ethereum\",\n  [ChainId.FUJI]: \"Avalanche Fuji Testnet\",\n  [ChainId.AVALANCHE]: \"Avalanche Mainnet C-Chain\",\n};\n\nexport const NETWORK_LABELS_SHORT: {\n  [key: number]: string;\n} = {\n  [ChainId.LOCALHOST]: \"Localhost\",\n  [ChainId.ETHEREUM]: \"Ethereum\",\n  [ChainId.FUJI]: \"Fuji\",\n  [ChainId.AVALANCHE]: \"Avalanche\",\n};\n\nexport const NATIVE_CURRENCY: {\n  [key: number]: string;\n} = {\n  0: \"AVAX\", // Default fallback\n  [ChainId.LOCALHOST]: \"ETH\",\n  [ChainId.ETHEREUM]: \"ETH\",\n  [ChainId.FUJI]: \"AVAX\",\n  [ChainId.AVALANCHE]: \"AVAX\",\n};\n\nexport const Networks = {\n  MainNet: 1,\n  Ropsten: 3,\n  Rinkeby: 4,\n  Goerli: 5,\n  Kovan: 42,\n  Localhost: 31337,\n  Fuji: 43113,\n  Avalanche: 43114,\n};\n\nexport interface IERC20 {\n  symbol: string;\n  address: string;\n  decimals: number;\n  name: string;\n  abi: any;\n}\n\nexport const TOKENS_BY_NETWORK: {\n  [key: number]: IERC20[];\n} = {\n  [Networks.Fuji]: [],\n  [Networks.Avalanche]: [\n    {\n      address: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n      symbol: \"WAVAX\",\n      name: \"WAVAX\",\n      decimals: 18,\n      abi: ERC20ABI,\n    },\n  ],\n};\n\nexport interface IERC1155 {\n  address: string;\n  abi: any;\n}\n\nexport const COLLECTIONS_BY_NETWORK: {\n  [key: number]: IERC1155[];\n} = {\n  [Networks.Localhost]: [\n    {\n      address: CONTINENTS_LOCALHOST_ADDRESS,\n      abi: ContinentsAbi,\n    },\n  ],\n  [Networks.Fuji]: [\n    {\n      address: CONTINENTS_FUJI_ADDRESS,\n      abi: ContinentsAbi,\n    },\n  ],\n  [Networks.Avalanche]: [\n    {\n      address: CONTINENTS_AVALANCHE_ADDRESS,\n      abi: ContinentsAbi,\n    },\n  ],\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const CONTINENTS_LOCALHOST_ADDRESS = \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\";\nexport const CONTINENTS_FUJI_ADDRESS = \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\";\nexport const CONTINENTS_AVALANCHE_ADDRESS = \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\";\n","import { Web3Provider } from '@ethersproject/providers'\n\nexport default function getLibrary(provider: any): Web3Provider {\n    const library = new Web3Provider(provider, 'any')\n    library.pollingInterval = 15000\n    return library\n}\n","// get collection list - started\nexport const GET_COLLECTIONS_STARTED: string = 'GET_COLLECTIONS_STARTED';\n// get collection list - success\nexport const GET_COLLECTIONS_SUCCESS: string = 'GET_COLLECTIONS_SUCCESS';\n// get collection list - failure\nexport const GET_COLLECTIONS_FAILURE: string = 'GET_COLLECTIONS_FAILURE';\n\n// get collection - started\nexport const GET_COLLECTION_STARTED: string = 'GET_COLLECTION_STARTED';\n// get collection - success\nexport const GET_COLLECTION_SUCCESS: string = 'GET_COLLECTION_SUCCESS';\n// get collection - failure\nexport const GET_COLLECTION_FAILURE: string = 'GET_COLLECTION_FAILURE';\n\n// get asset - started\nexport const GET_ASSET_STARTED: string = 'GET_ASSET_STARTED';\n// get asset - success\nexport const GET_ASSET_SUCCESS: string = 'GET_ASSET_SUCCESS';\n// get asset - failure\nexport const GET_ASSET_FAILURE: string = 'GET_ASSET_FAILURE';\n\n// get assets - started\nexport const GET_ASSETS_STARTED: string = 'GET_ASSETS_STARTED';\n// get assets - success\nexport const GET_ASSETS_SUCCESS: string = 'GET_ASSETS_SUCCESS';\n// get assets - failure\nexport const GET_ASSETS_FAILURE: string = 'GET_ASSETS_FAILURE';\n","import {\n    GET_COLLECTIONS_STARTED, GET_COLLECTIONS_SUCCESS, GET_COLLECTIONS_FAILURE\n} from \"../actions/actionTypes\";\n\n// define initial state of collection\nconst initialState = {\n    data: null,\n    loading: false,\n    error: null\n}\n\n// update store based on type and payload and return the state\nexport default function common(state = initialState, action: any) {\n    switch (action.type) {\n        case GET_COLLECTIONS_STARTED:\n            return {\n                ...state,\n                loading: true\n            }\n        case GET_COLLECTIONS_SUCCESS:\n            const { data } = action.payload;\n            return {\n                ...state,\n                data,\n                loading: false\n            }\n        case GET_COLLECTIONS_FAILURE:\n            const { error } = action.payload;\n            return {\n                ...state,\n                error\n            }\n        default:\n            return state\n    }\n}","import {\n    GET_COLLECTION_STARTED, GET_COLLECTION_SUCCESS, GET_COLLECTION_FAILURE\n} from \"../actions/actionTypes\";\n\n// define initial state of collection\nconst initialState = {\n    data: null,\n    loading: false,\n    error: null\n}\n\n// update store based on type and payload and return the state\nexport default function common(state = initialState, action: any) {\n    switch (action.type) {\n        case GET_COLLECTION_STARTED:\n            return {\n                ...state,\n                loading: true\n            }\n        case GET_COLLECTION_SUCCESS:\n            const { data } = action.payload;\n            return {\n                ...state,\n                data,\n                loading: false\n            }\n        case GET_COLLECTION_FAILURE:\n            const { error } = action.payload;\n            return {\n                ...state,\n                error\n            }\n        default:\n            return state\n    }\n}","import {\n    GET_ASSETS_STARTED, GET_ASSETS_SUCCESS, GET_ASSETS_FAILURE\n} from \"../actions/actionTypes\";\n\n// define initial state of assets\nconst initialState = {\n    data: null,\n    loading: false,\n    error: null\n}\n\n// update store based on type and payload and return the state\nexport default function common(state = initialState, action: any) {\n    switch (action.type) {\n        case GET_ASSETS_STARTED:\n            return {\n                ...state,\n                loading: true\n            }\n        case GET_ASSETS_SUCCESS:\n            const { data } = action.payload;\n            return {\n                ...state,\n                data,\n                loading: false\n            }\n        case GET_ASSETS_FAILURE:\n            const { error } = action.payload;\n            return {\n                ...state,\n                error\n            }\n        default:\n            return state\n    }\n}","import {\n    GET_ASSET_STARTED, GET_ASSET_SUCCESS, GET_ASSET_FAILURE\n} from \"../actions/actionTypes\";\n\n// define initial state of asset\nconst initialState = {\n    data: null,\n    loading: false,\n    error: null\n}\n\n// update store based on type and payload and return the state\nexport default function common(state = initialState, action: any) {\n    switch (action.type) {\n        case GET_ASSET_STARTED:\n            return {\n                ...state,\n                loading: true\n            }\n        case GET_ASSET_SUCCESS:\n            const { data } = action.payload;\n            return {\n                ...state,\n                data,\n                loading: false\n            }\n        case GET_ASSET_FAILURE:\n            const { error } = action.payload;\n            return {\n                ...state,\n                error\n            }\n        default:\n            return state\n    }\n}","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport { save, load } from \"redux-localstorage-simple\";\nimport thunk from \"redux-thunk\";\n// import collectionReducer from './state/features/collections/collectionsSlice'\nimport collectionsReducer from './state/reducers/collections';\nimport collectionReducer from './state/reducers/collection';\nimport assetsReducer from './state/reducers/assets';\nimport assetReducer from './state/reducers/asset';\n// import application from \"./application/reducer\";\n// import user from \"./user/reducer\";\n\nconst rootReducer = combineReducers({\n  // application,\n  // user,\n  collections: collectionsReducer,\n  collection: collectionReducer,\n  assets: assetsReducer,\n  asset: assetReducer,\n});\n\n// const PERSISTED_KEYS: string[] = [\"user\", \"collections\", \"assets\"];\nconst PERSISTED_KEYS: string[] = [];\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: [save({ states: PERSISTED_KEYS }), thunk],\n  preloadedState: load({ states: PERSISTED_KEYS }),\n});\n\n// store.dispatch(updateVersion());\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type AppState = ReturnType<typeof store.getState>;\nexport type RootState = ReturnType<typeof rootReducer>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { supportedChainIds } from \"../constants\";\n\nexport const injected = new InjectedConnector({\n  supportedChainIds,\n});\n","const ROUTE_ACCOUNT = \"/account\";\nconst ROUTE_COLLECTIONS = \"/collections\";\nconst ROUTE_COLLECTION = \"/assets/:contractAddress\";\nconst ROUTE_COLLECTIBLE = \"/assets/:contractAddress/:tokenId\";\nconst ROUTE_CREATE_COLLECTION = \"/collection/create\";\nconst ROUTE_CREATOR_DASHBOARD = \"/creator-dashboard\";\nconst ROUTE_DEFAULT = \"/\";\nconst ROUTE_EXPLORE = \"/explore\";\nconst ROUTE_FAQ = \"/faq\";\nconst ROUTE_MARKETPLACE = \"/assets\";\nconst ROUTE_ROADMAP = \"/roadmap\";\n\n// Used to pull a convenient name for analytics tracking events. The key must\n// be react-router ready path, and can include params such as :id for popup windows\n// const PATH_NAME_MAP = {\n//   [ROUTE_ACCOUNT]: \"Account Page\",\n//   [ROUTE_COLLECTIONS]: \"Collections Page\",\n//   [ROUTE_COLLECTION]: \"Collection Page\",\n//   [ROUTE_COLLECTIBLE]: \"Collectible Page\",\n//   [ROUTE_CREATE_COLLECTION]: \"Create Collection Page\",\n//   [ROUTE_CREATOR_DASHBOARD]: \"Create Page\",\n//   [ROUTE_DEFAULT]: \"Home\",\n//   [ROUTE_EXPLORE]: \"Map Page\",\n//   [ROUTE_FAQ]: \"Info Page\",\n//   [ROUTE_MARKETPLACE]: \"Marketplace Page\",\n//   [ROUTE_ROADMAP]: \"Roadmap\",\n// };\n\nexport {\n  ROUTE_ACCOUNT,\n  ROUTE_COLLECTIONS,\n  ROUTE_COLLECTION,\n  ROUTE_COLLECTIBLE,\n  ROUTE_CREATE_COLLECTION,\n  ROUTE_CREATOR_DASHBOARD,\n  ROUTE_DEFAULT,\n  ROUTE_EXPLORE,\n  ROUTE_FAQ,\n  ROUTE_MARKETPLACE,\n  ROUTE_ROADMAP,\n};\n","import {\n  GlobeIcon,\n  // CreditCardIcon,\n  CollectionIcon,\n  HomeIcon,\n  QuestionMarkCircleIcon,\n  MapIcon,\n  // PhotographIcon,\n  // UserCircleIcon,\n} from \"@heroicons/react/outline\";\nimport * as routes from \"./routes\";\n\nexport const navigation = [\n  { name: \"Home\", href: routes.ROUTE_DEFAULT, icon: HomeIcon, exact: true },\n  {\n    name: \"Marketplace\",\n    href: routes.ROUTE_MARKETPLACE,\n    icon: CollectionIcon,\n    exact: false,\n  },\n  // {\n  //   name: \"Collections\",\n  //   href: routes.ROUTE_COLLECTIONS,\n  //   icon: CollectionIcon,\n  //   exact: false,\n  // },\n  {\n    name: \"Explore\",\n    href: routes.ROUTE_EXPLORE,\n    icon: GlobeIcon,\n    exact: false,\n  },\n  // {\n  //   name: \"Account\",\n  //   href: routes.ROUTE_ACCOUNT,\n  //   icon: UserCircleIcon,\n  //   exact: true,\n  // },\n  // {\n  //   name: \"Create\",\n  //   href: routes.ROUTE_CREATOR_DASHBOARD,\n  //   icon: PhotographIcon,\n  //   exact: true,\n  // },\n  {\n    name: \"Roadmap\",\n    href: routes.ROUTE_ROADMAP,\n    icon: MapIcon,\n    exact: true,\n  },\n  {\n    name: \"FAQ\",\n    href: routes.ROUTE_FAQ,\n    icon: QuestionMarkCircleIcon,\n    exact: true,\n  },\n];\n","import { ConnectionBadge } from \"./ConnectionBadge\";\nexport default ConnectionBadge;\n","import { useState } from \"react\";\n\nexport interface ConnectionBadgeProps {\n  network: string;\n  account: string;\n}\n\nexport const ConnectionBadge = ({ network, account }: ConnectionBadgeProps) => {\n  const [message, setMessage] = useState<string>(\"\");\n  const [messageColor, setMessageColor] = useState<string>(\"\");\n  const [showMsg, setShowMsg] = useState<boolean>(false);\n\n  const copyToClipboard = () => {\n    if (account) {\n      navigator.clipboard.writeText(account);\n      navigator.clipboard\n        .writeText(account)\n        .then(\n          function () {\n            setMessageColor(\"green-500\");\n            setMessage(\"Copied!\");\n          },\n          function () {\n            setMessageColor(\"red-500\");\n            setMessage(\"Failed to copy.\");\n          }\n        )\n        .then(() => {\n          setShowMsg(true);\n          setTimeout(() => {\n            setShowMsg(false);\n          }, 1200);\n        });\n    }\n  };\n\n  return (\n    <div className='inline-flex text-xs font-medium relative'>\n      <span className='inline-flex items-center px-3 py-1.5 rounded-l-md border border-green-500 bg-green-50 text-green-700'>\n        <svg\n          className='-ml-0.5 mr-1.5 h-2 w-2 text-green-500 flex-shrink-0'\n          fill='currentColor'\n          viewBox='0 0 8 8'>\n          <circle cx='4' cy='4' r='3' />\n        </svg>\n        {network}\n      </span>\n      <span\n        className='inline-flex items-center px-3 py-1.5 w-48 overflow-hidden rounded-r-md border border-l-0 border-green-500 bg-green-50 text-green-700 hover:bg-green-100 cursor-pointer'\n        onClick={copyToClipboard}>\n        <span className='truncate'>{account}</span>\n      </span>\n      {showMsg && (\n        <span\n          className={`absolute flex items-center justify-center bg-gray-900 opacity-90 w-full h-full left-0 top-0 font-semibold px-3 py-1.5 rounded-md text-${messageColor}`}>\n          {message}\n        </span>\n      )}\n    </div>\n  );\n};\n","import { DarkToggle } from \"./DarkToggle\";\nexport default DarkToggle;\n","import React from \"react\";\nimport { MoonIcon, SunIcon } from \"@heroicons/react/solid\";\nimport { useDark } from \"../../hooks\";\n\nexport const DarkToggle = () => {\n  const [dark, toggleDark] = useDark();\n\n  return (\n    <button\n      type='button'\n      onClick={toggleDark}\n      className='inline-flex items-center p-2 rounded-full'>\n      {dark ? (\n        <SunIcon className='h-6 w-6' />\n      ) : (\n        <MoonIcon className='h-6 w-6' />\n      )}\n    </button>\n  );\n};\n","import { useState, useEffect } from \"react\";\n\nexport default function useDark() {\n  const [dark, setDark] = useState<boolean>(false);\n\n  // Whenever the user explicitly chooses to respect the OS preference\n  //   const removeTheme = () => {\n  //     localStorage.removeItem(\"dark\");\n  //   };\n\n  const toggleDark = () => {\n    document.documentElement.classList.toggle(\"dark\");\n    setDark(!dark);\n  };\n\n  // On page load or when changing dark\n  // Initial logic in /public/index.html\n  useEffect(() => {\n    const isDark = document\n      .getElementsByTagName(\"html\")[0]\n      .classList.contains(\"dark\");\n\n    setDark(isDark);\n    localStorage.dark = isDark;\n  }, [dark]);\n\n  return [dark, toggleDark] as const;\n}\n","import { SocialLink } from \"./SocialLink\";\nexport default SocialLink;\n","import React, { PropsWithChildren } from \"react\";\n\nexport interface SocialLinkProps {\n  href: string;\n  title: string;\n  viewbox?: string;\n}\n\nexport const SocialLink: React.FC<PropsWithChildren<SocialLinkProps>> = ({\n  href,\n  title,\n  viewbox,\n  children,\n}) => {\n  return (\n    <a\n      href={href}\n      target='_blank'\n      rel='noreferrer'\n      className='text-gray-400 hover:text-gray-500'>\n      <span className='sr-only'>{title}</span>\n      <svg\n        className='h-6 w-6'\n        fill='currentColor'\n        viewBox={viewbox ? viewbox : \"0 0 24 24\"}\n        aria-hidden='true'>\n        {children}\n      </svg>\n    </a>\n  );\n};\n","import { Footer } from \"./Footer\";\nexport default Footer;\n","import React from \"react\";\nimport { MailIcon } from \"@heroicons/react/solid\";\nimport SocialLink from \"../SocialLink\";\n\nexport const Footer = () => {\n  const social = {\n    facebook: {\n      show: false,\n      href: \"#none\",\n      title: \"Facebook\",\n    },\n    instagram: {\n      show: false,\n      href: \"#none\",\n      title: \"Instagram\",\n    },\n    twitter: {\n      show: true,\n      href: \"https://twitter.com/HodoNetwork\",\n      title: \"Twitter\",\n    },\n    github: {\n      show: false,\n      href: \"https://github.com/Hodo-Network\",\n      title: \"GitHub\",\n    },\n    dribbble: {\n      show: false,\n      href: \"#none\",\n      title: \"Dribbble\",\n    },\n    discord: {\n      show: true,\n      href: \"https://discord.gg/vYcZj5Fgfy\",\n      title: \"Discord\",\n    },\n    email: {\n      show: true,\n      href: \"mailto:info@hodo.network\",\n      title: \"Email\",\n    },\n  };\n\n  return (\n    <div className='py-6 flex flex-col'>\n      <div className='flex justify-center space-x-6'>\n        {social.facebook.show && (\n          <SocialLink href={social.facebook.href} title={social.facebook.title}>\n            <path\n              fillRule='evenodd'\n              d='M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z'\n              clipRule='evenodd'\n            />\n          </SocialLink>\n        )}\n\n        {social.instagram.show && (\n          <SocialLink\n            href={social.instagram.href}\n            title={social.instagram.title}>\n            <path\n              fillRule='evenodd'\n              d='M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 015.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.097 3.097 0 00-.748-1.15 3.098 3.098 0 00-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058zM12 6.865a5.135 5.135 0 110 10.27 5.135 5.135 0 010-10.27zm0 1.802a3.333 3.333 0 100 6.666 3.333 3.333 0 000-6.666zm5.338-3.205a1.2 1.2 0 110 2.4 1.2 1.2 0 010-2.4z'\n              clipRule='evenodd'\n            />\n          </SocialLink>\n        )}\n\n        {social.twitter.show && (\n          <SocialLink href={social.twitter.href} title={social.twitter.title}>\n            <path d='M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84' />\n          </SocialLink>\n        )}\n\n        {social.github.show && (\n          <SocialLink href={social.github.href} title={social.github.title}>\n            <path\n              fillRule='evenodd'\n              d='M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z'\n              clipRule='evenodd'\n            />\n          </SocialLink>\n        )}\n\n        {social.dribbble.show && (\n          <SocialLink href={social.dribbble.href} title={social.dribbble.title}>\n            <path\n              fillRule='evenodd'\n              d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10c5.51 0 10-4.48 10-10S17.51 2 12 2zm6.605 4.61a8.502 8.502 0 011.93 5.314c-.281-.054-3.101-.629-5.943-.271-.065-.141-.12-.293-.184-.445a25.416 25.416 0 00-.564-1.236c3.145-1.28 4.577-3.124 4.761-3.362zM12 3.475c2.17 0 4.154.813 5.662 2.148-.152.216-1.443 1.941-4.48 3.08-1.399-2.57-2.95-4.675-3.189-5A8.687 8.687 0 0112 3.475zm-3.633.803a53.896 53.896 0 013.167 4.935c-3.992 1.063-7.517 1.04-7.896 1.04a8.581 8.581 0 014.729-5.975zM3.453 12.01v-.26c.37.01 4.512.065 8.775-1.215.25.477.477.965.694 1.453-.109.033-.228.065-.336.098-4.404 1.42-6.747 5.303-6.942 5.629a8.522 8.522 0 01-2.19-5.705zM12 20.547a8.482 8.482 0 01-5.239-1.8c.152-.315 1.888-3.656 6.703-5.337.022-.01.033-.01.054-.022a35.318 35.318 0 011.823 6.475 8.4 8.4 0 01-3.341.684zm4.761-1.465c-.086-.52-.542-3.015-1.659-6.084 2.679-.423 5.022.271 5.314.369a8.468 8.468 0 01-3.655 5.715z'\n              clipRule='evenodd'\n            />\n          </SocialLink>\n        )}\n\n        {/* TODO: get better svg to remove 1px display issue */}\n        {social.discord.show && (\n          <SocialLink\n            href={social.discord.href}\n            title={social.discord.title}\n            viewbox='0 0 245 240'>\n            <path d='M104.4 103.9c-5.7 0-10.2 5-10.2 11.1s4.6 11.1 10.2 11.1c5.7 0 10.2-5 10.2-11.1.1-6.1-4.5-11.1-10.2-11.1zM140.9 103.9c-5.7 0-10.2 5-10.2 11.1s4.6 11.1 10.2 11.1c5.7 0 10.2-5 10.2-11.1s-4.5-11.1-10.2-11.1z'></path>\n            <path d='M189.5 20h-134C44.2 20 35 29.2 35 40.6v135.2c0 11.4 9.2 20.6 20.5 20.6h113.4l-5.3-18.5 12.8 11.9 12.1 11.2 21.5 19V40.6c0-11.4-9.2-20.6-20.5-20.6zm-38.6 130.6s-3.6-4.3-6.6-8.1c13.1-3.7 18.1-11.9 18.1-11.9-4.1 2.7-8 4.6-11.5 5.9-5 2.1-9.8 3.5-14.5 4.3-9.6 1.8-18.4 1.3-25.9-.1-5.7-1.1-10.6-2.7-14.7-4.3-2.3-.9-4.8-2-7.3-3.4-.3-.2-.6-.3-.9-.5-.2-.1-.3-.2-.4-.3-1.8-1-2.8-1.7-2.8-1.7s4.8 8 17.5 11.8c-3 3.8-6.7 8.3-6.7 8.3-22.1-.7-30.5-15.2-30.5-15.2 0-32.2 14.4-58.3 14.4-58.3 14.4-10.8 28.1-10.5 28.1-10.5l1 1.2c-18 5.2-26.3 13.1-26.3 13.1s2.2-1.2 5.9-2.9c10.7-4.7 19.2-6 22.7-6.3.6-.1 1.1-.2 1.7-.2 6.1-.8 13-1 20.2-.2 9.5 1.1 19.7 3.9 30.1 9.6 0 0-7.9-7.5-24.9-12.7l1.4-1.6s13.7-.3 28.1 10.5c0 0 14.4 26.1 14.4 58.3 0 0-8.5 14.5-30.6 15.2z'></path>\n          </SocialLink>\n        )}\n\n        {social.email.show && (\n          <a\n            href={social.email.href}\n            target='_blank'\n            rel='noreferrer'\n            className='text-gray-400 hover:text-gray-500'>\n            <span className='sr-only'>{social.email.title}</span>\n            <MailIcon className='h-6 w-6' />\n          </a>\n        )}\n      </div>\n\n      <div className='mt-4'>\n        <p className='text-center text-base text-gray-400'>\n          {process.env.REACT_APP_VERSION}\n        </p>\n      </div>\n    </div>\n  );\n};\n","const TEXT_ADD_FUNDS = \"Add Funds\";\nconst TEXT_ADDRESS = \"Address\";\nconst TEXT_ALL = \"All\";\nconst TEXT_AVAILABLE_TO_GEO = \"Available in your area\";\nconst TEXT_BALANCE = \"Balance\";\nconst TEXT_BLOCKCHAIN = \"Blockchain\";\nconst TEXT_BUY = \"Buy Now\";\nconst TEXT_CAPITAL_CITIES = \"Capital Cities\";\nconst TEXT_COLLECTION = \"Collection\";\nconst TEXT_CONNECT = \"Connect\";\nconst TEXT_CONNECTED = \"Connected\";\nconst TEXT_CONTRACT = \"Contract\";\nconst TEXT_COORDS = \"Coordinates\";\nconst TEXT_COPYRIGHT = \"\\u00A9 2021 Hodo Network. All rights reserved.\";\nconst TEXT_COST = \"Cost\";\nconst TEXT_COUNTRIES = \"Countries\";\nconst TEXT_CURRENT_PRICE = \"Current price\";\nconst TEXT_DESCRIPTION = \"Description\";\nconst TEXT_GROUP = \"Group\";\nconst TEXT_ID = \"Asset ID\";\nconst TEXT_INSTALL_METAMASK = \"Install MetaMask\";\nconst TEXT_LIST = \"List\";\nconst TEXT_LOCATION = \"Location\";\nconst TEXT_MONUMENTS = \"Monuments\";\nconst TEXT_NETWORK = \"Network\";\nconst TEXT_ONBOARDING = \"Onboarding\";\nconst TEXT_OWNER = \"Owned by\";\nconst TEXT_REGION = \"My Region\";\nconst TEXT_SELL = \"Sell\";\nconst TEXT_SWITCH = \"Switch Networks\";\n\nexport {\n  TEXT_ADD_FUNDS,\n  TEXT_ADDRESS,\n  TEXT_ALL,\n  TEXT_AVAILABLE_TO_GEO,\n  TEXT_BALANCE,\n  TEXT_BLOCKCHAIN,\n  TEXT_BUY,\n  TEXT_CAPITAL_CITIES,\n  TEXT_COLLECTION,\n  TEXT_CONNECT,\n  TEXT_CONNECTED,\n  TEXT_COORDS,\n  TEXT_CONTRACT,\n  TEXT_COPYRIGHT,\n  TEXT_COST,\n  TEXT_COUNTRIES,\n  TEXT_CURRENT_PRICE,\n  TEXT_DESCRIPTION,\n  TEXT_GROUP,\n  TEXT_ID,\n  TEXT_INSTALL_METAMASK,\n  TEXT_LIST,\n  TEXT_LOCATION,\n  TEXT_MONUMENTS,\n  TEXT_NETWORK,\n  TEXT_ONBOARDING,\n  TEXT_OWNER,\n  TEXT_REGION,\n  TEXT_SELL,\n  TEXT_SWITCH,\n};\n","import { Button } from \"./Button\";\nexport default Button;\n","export interface ButtonProps {\n  primary?: boolean;\n  size?: \"small\" | \"medium\" | \"large\";\n  onClick?: () => void;\n  disabled?: boolean;\n  children?: any;\n}\n\nexport const Button = ({\n  primary = false,\n  size = \"medium\",\n  disabled = false,\n  children,\n  ...props\n}: ButtonProps) => {\n  const mode = primary ? \"primary\" : \"secondary\";\n  return (\n    <button\n      type='button'\n      className={[\"btn\", `btn--${mode}`, `btn--${size}`].join(\" \")}\n      disabled={disabled}\n      {...props}>\n      {children}\n    </button>\n  );\n};\n","import Button from \"../Button\";\n\nexport interface PureOnboardingButtonProps {\n  label?: string;\n  disabled?: boolean;\n  onConnect?: () => void;\n}\n\nexport const PureOnboardingButton = ({\n  label = \"Connect\",\n  disabled = false,\n  onConnect,\n}: PureOnboardingButtonProps) => {\n  return (\n    <Button onClick={onConnect} disabled={disabled}>\n      {label}\n    </Button>\n  );\n};\n","import { useEffect, useState, useRef } from \"react\";\nimport MetaMaskOnboarding from \"@metamask/onboarding\";\n// import detectEthereumProvider from \"@metamask/detect-provider\";\n// import { useWeb3React } from \"@web3-react/core\";\n// import { Web3Provider } from \"@ethersproject/providers\";\nimport {\n  TEXT_INSTALL_METAMASK,\n  TEXT_CONNECT,\n  TEXT_CONNECTED,\n} from \"../../constants/text\";\nimport { PureOnboardingButton } from \"./OnboardingButton\";\n\nconst OnboardingButton = () => {\n  const [label, setLabel] = useState(TEXT_INSTALL_METAMASK);\n  const [disabled, setDisabled] = useState(false);\n  const [accounts, setAccounts] = useState([]);\n  const onboarding = useRef<MetaMaskOnboarding>();\n  // const { library, connector, chainId } = useWeb3React<Web3Provider>();\n  // const [provider, setProvider] = useState<any>();\n\n  useEffect(() => {\n    if (!onboarding.current) {\n      onboarding.current = new MetaMaskOnboarding();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n      if (accounts.length > 0) {\n        setLabel(TEXT_CONNECTED);\n        setDisabled(true);\n        onboarding.current?.stopOnboarding();\n      } else {\n        setLabel(TEXT_CONNECT);\n        setDisabled(false);\n      }\n    }\n  }, [accounts]);\n\n  const handleNewAccounts = (newAccounts: any) => {\n    setAccounts(newAccounts);\n  };\n\n  const onClick = async () => {\n    // const updateProvider = async () => {\n    //   const result = await detectEthereumProvider();\n    //   setProvider(result);\n    // };\n    // updateProvider();\n\n    try {\n      if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n        // @ts-ignore\n        await ethereum\n          .request({ method: \"eth_requestAccounts\" })\n          .then(handleNewAccounts);\n        // @ts-ignore\n        ethereum.on(\"accountsChanged\", handleNewAccounts);\n        return () => {\n          // @ts-ignore\n          ethereum?.off(\"accountsChanged\", handleNewAccounts);\n        };\n      } else {\n        // @ts-ignore\n        onboarding.current.startOnboarding();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <PureOnboardingButton\n      label={label}\n      disabled={disabled}\n      onConnect={onClick}\n    />\n  );\n};\n\nexport default OnboardingButton;\n","import { Navbar } from \"./Navbar\";\nexport default Navbar;\n","import React, { Fragment, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { Dialog, Transition } from \"@headlessui/react\";\nimport { MenuIcon, XIcon } from \"@heroicons/react/outline\";\nimport { navigation } from \"../../constants/navigation\";\nimport { NETWORK_LABELS_SHORT } from \"../../constants\";\n\nimport ConnectionBadge from \"../ConnectionBadge\";\nimport DarkToggle from \"../DarkToggle\";\nimport Footer from \"../Footer\";\nimport OnboardingButton from \"../OnboardingButton\";\nimport SearchBar from \"../SearchBar\";\n\nexport interface NavbarProps {\n  hideTitle?: boolean;\n}\n\nexport const Navbar = ({ hideTitle }: NavbarProps) => {\n  const { chainId, account } = useWeb3React<Web3Provider>();\n  const [menuOpen, setMenuOpen] = useState(false);\n  const enableSearch = false;\n  const network = (chainId && NETWORK_LABELS_SHORT[chainId]) || \"\";\n\n  return (\n    <header className='flex-shrink-0 bg-white dark:bg-gray-900 text-gray-800 dark:text-white border-b border-gray-200 dark:border-gray-800 flex items-center'>\n      <div className='flex-1 flex items-center justify-between py-3 px-4 sm:px-8'>\n        <div className='flex items-center'>\n          <span className={`font-bold text-xl ${hideTitle && \"md:hidden\"}`}>\n            Hodo Network\n          </span>\n        </div>\n\n        {enableSearch && (\n          <div className='min-w-0 max-w-2xl hidden md:flex flex-1'>\n            <SearchBar />\n          </div>\n        )}\n\n        <div className='ml-10 flex-shrink-0 hidden md:flex items-center space-x-6'>\n          <DarkToggle />\n\n          {account ? (\n            <ConnectionBadge network={network} account={account} />\n          ) : (\n            <OnboardingButton />\n          )}\n        </div>\n      </div>\n\n      <div className='py-3 px-4 flex items-center md:hidden'>\n        <button\n          type='button'\n          className='inline-flex items-center justify-center p-2 rounded-md text-gray-800 dark:text-white hover:text-gray-600 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-600'\n          onClick={() => setMenuOpen(true)}>\n          <span className='sr-only'>Open main menu</span>\n          <MenuIcon className='block h-6 w-6' aria-hidden='true' />\n        </button>\n      </div>\n\n      <Transition.Root show={menuOpen} as={Fragment}>\n        <Dialog\n          as='div'\n          static\n          className='fixed inset-0 z-50 md:hidden'\n          open={menuOpen}\n          onClose={setMenuOpen}>\n          <Transition.Child\n            as={Fragment}\n            enter='transition-opacity ease-linear duration-300'\n            enterFrom='opacity-0'\n            enterTo='opacity-100'\n            leave='transition-opacity ease-linear duration-300'\n            leaveFrom='opacity-100'\n            leaveTo='opacity-0'>\n            <Dialog.Overlay className='hidden sm:block sm:fixed sm:inset-0 sm:bg-gray-600 sm:bg-opacity-75' />\n          </Transition.Child>\n\n          <Transition.Child\n            as={Fragment}\n            enter='transition ease-out duration-150 sm:ease-in-out sm:duration-300'\n            enterFrom='transform opacity-0 scale-110 sm:translate-x-full sm:scale-100 sm:opacity-100'\n            enterTo='transform opacity-100 scale-100  sm:translate-x-0 sm:scale-100 sm:opacity-100'\n            leave='transition ease-in duration-150 sm:ease-in-out sm:duration-300'\n            leaveFrom='transform opacity-100 scale-100 sm:translate-x-0 sm:scale-100 sm:opacity-100'\n            leaveTo='transform opacity-0 scale-110  sm:translate-x-full sm:scale-100 sm:opacity-100'>\n            <nav\n              className='fixed z-50 inset-0 h-full w-full bg-white dark:bg-gray-900 sm:inset-y-0 sm:left-auto sm:right-0 sm:max-w-sm sm:w-full sm:shadow-lg'\n              aria-label='Global'>\n              <div className='flex items-center justify-between py-3 px-4'>\n                <span className='ml-1 font-bold text-xl text-gray-900 dark:text-white'>\n                  Hodo Network\n                </span>\n                <button\n                  type='button'\n                  className='inline-flex items-center justify-center p-2 rounded-md text-gray-800 dark:text-white hover:text-gray-600 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-600'\n                  onClick={() => setMenuOpen(false)}>\n                  <span className='sr-only'>Close main menu</span>\n                  <XIcon className='block h-6 w-6' aria-hidden='true' />\n                </button>\n              </div>\n\n              {enableSearch && (\n                <div className='mt-2 max-w-8xl mx-auto px-4 sm:px-6'>\n                  <SearchBar />\n                </div>\n              )}\n\n              <div className='flex-1 space-y-2 p-4'>\n                <div className='flex justify-between mb-6 text-gray-900 dark:text-white'>\n                  {account ? (\n                    <ConnectionBadge network={network} account={account} />\n                  ) : (\n                    <OnboardingButton />\n                  )}\n                  <DarkToggle />\n                </div>\n\n                {navigation.map((item) => (\n                  <NavLink\n                    key={item.name}\n                    to={item.href}\n                    exact={item.exact}\n                    className='text-gray-800 dark:text-gray-100 hover:bg-gray-200 dark:hover:bg-gray-800 flex items-center rounded-md px-4 py-3'\n                    activeClassName='bg-gray-200 dark:bg-gray-800 text-white'\n                    onClick={() => setMenuOpen(false)}>\n                    <item.icon className='h-6 w-6' aria-hidden='true' />\n                    <span className='ml-3'>{item.name}</span>\n                  </NavLink>\n                ))}\n              </div>\n\n              <Footer />\n            </nav>\n          </Transition.Child>\n        </Dialog>\n      </Transition.Root>\n    </header>\n  );\n};\n","import { MenuClosedIcon } from \"./MenuClosedIcon\";\nexport default MenuClosedIcon;\n","import React from \"react\";\n\nexport interface MenuClosedIconProps {\n  className?: string;\n  props?: any;\n}\n\nexport const MenuClosedIcon: React.FC<MenuClosedIconProps> = ({\n  className,\n  props,\n}) => {\n  return (\n    <svg\n      viewBox='0 0 24 16'\n      fill='currentColor'\n      xmlns='http://www.w3.org/2000/svg'\n      className={className}\n      {...props}>\n      <path d='M14 9H1C0.4 9 0 8.6 0 8C0 7.4 0.4 7 1 7H14C14.6 7 15 7.4 15 8C15 8.6 14.6 9 14 9Z'></path>\n      <path d='M23 2H1C0.4 2 0 1.6 0 1C0 0.4 0.4 0 1 0H23C23.6 0 24 0.4 24 1C24 1.6 23.6 2 23 2Z'></path>\n      <path d='M23 16H1C0.4 16 0 15.6 0 15C0 14.4 0.4 14 1 14H23C23.6 14 24 14.4 24 15C24 15.6 23.6 16 23 16Z'></path>\n    </svg>\n  );\n};\n","import { MenuOpenIcon } from \"./MenuOpenIcon\";\nexport default MenuOpenIcon;\n","import React from \"react\";\n\nexport interface MenuOpenIconProps {\n  className?: string;\n  props?: any;\n}\n\nexport const MenuOpenIcon: React.FC<MenuOpenIconProps> = ({\n  className,\n  props,\n}) => {\n  return (\n    <svg\n      viewBox='0 0 24 18'\n      fill='currentColor'\n      xmlns='http://www.w3.org/2000/svg'\n      className={className}\n      {...props}>\n      <path d='M11 16H23C23.552 16 24 16.448 24 17C24 17.552 23.552 18 23 18H11C10.448 18 10 17.552 10 17C10 16.448 10.448 16 11 16Z'></path>\n      <path d='M23 2H11C10.448 2 10 1.552 10 1C10 0.448 10.448 0 11 0H23C23.552 0 24 0.448 24 1C24 1.552 23.552 2 23 2Z'></path>\n      <path d='M0 9L7 3V8H23C23.552 8 24 8.448 24 9C24 9.552 23.552 10 23 10H7V15L0 9Z'></path>\n    </svg>\n  );\n};\n","import { Sidebar } from \"./Sidebar\";\nexport default Sidebar;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { navigation } from \"../../constants/navigation\";\nimport Footer from \"../Footer\";\nimport MenuClosedIcon from \"../MenuClosedIcon\";\nimport MenuOpenIcon from \"../MenuOpenIcon\";\n\nexport interface SidebarProps {\n  mini: boolean;\n  toggle: () => void;\n}\n\nexport const Sidebar: React.FC<SidebarProps> = ({ mini, toggle }) => {\n  return (\n    <div\n      className={`hidden md:flex flex-col border-r border-gray-700 dark:border-gray-800 bg-gray-800 dark:bg-gray-900 ${\n        mini ? \"w-20\" : \"w-80\"\n      }`}>\n      <div className='h-16'>\n        <div\n          className={`flex items-center h-full p-3 ${\n            mini && \"justify-center\"\n          }`}>\n          {mini ? (\n            <button\n              type='button'\n              className='text-gray-200 px-4 py-3 focus:outline-none'\n              aria-label='Toggle sidebar'\n              onClick={toggle}>\n              <MenuClosedIcon className='w-6 h-6' />\n            </button>\n          ) : (\n            <button\n              type='button'\n              className='text-gray-200 px-4 py-3 focus:outline-none'\n              aria-label='Toggle sidebar'\n              onClick={toggle}>\n              <MenuOpenIcon className='w-6 h-6' />\n            </button>\n          )}\n\n          <span\n            className={`-ml-1 font-bold text-xl text-white ${\n              mini && \"sr-only\"\n            }`}>\n            Hodo Network\n          </span>\n        </div>\n      </div>\n\n      <nav aria-label='Sidebar' className='flex-1 space-y-2 px-3 py-2 sm:py-4'>\n        {navigation.map((item) => (\n          <NavLink\n            key={item.name}\n            to={item.href}\n            exact={item.exact}\n            className='text-gray-400 hover:bg-gray-900 dark:hover:bg-gray-800 flex items-center rounded-md px-4 py-3'\n            activeClassName='bg-gray-900 dark:bg-gray-800 text-white'>\n            <item.icon className='h-6 w-6' aria-hidden='true' />\n            <span className={mini ? \"sr-only\" : \"ml-3\"}>{item.name}</span>\n          </NavLink>\n        ))}\n      </nav>\n\n      {!mini && <Footer />}\n    </div>\n  );\n};\n","import IPFSGatewayTools from \"@pinata/ipfs-gateway-tools/dist/browser\";\nimport { IPFS_GATEWAY_PREFIX } from \"../constants\";\n\n// @param url\n// ipfs://CID\n// @return https://gateway.pinata.cloud/ipfs/CID\nexport default function convertIpfsUrl(url: string) {\n    const gatewayTools = new IPFSGatewayTools();\n    return gatewayTools.convertToDesiredGateway(url, IPFS_GATEWAY_PREFIX);\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { AppState, AppDispatch } from '../store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<AppState> = useSelector;\n","// import { useEffect, useState } from \"react\";\nimport { useParams, useRouteMatch, useLocation } from \"react-router-dom\";\nimport { ROUTE_DEFAULT } from \"./constants/routes\";\nimport routes from \"./routes\";\n// import Breadcrumbs from \"./components/Breadcrumbs\";\nimport { useAppSelector } from \"./state/hooks\";\n\nexport default function ContentWrapper({ children }) {\n  const match = useRouteMatch();\n  const params = useParams();\n  const location = useLocation();\n  // const [crumbs, setCrumbs] = useState([]);\n  const collections = useAppSelector((state) => state.collections.data);\n  // const asset = useAppSelector((state) => state.asset.data);\n\n  const matchHome = useRouteMatch({\n    path: \"/\",\n    exact: true,\n  });\n\n  // useEffect(() => {\n  //   setCrumbs(getCrumbs());\n  // }, [location]);\n\n  const getCrumbs = () => {\n    return (\n      routes\n        // Get all routes that contain the current one.\n        .filter(({ path }) => match.path.includes(path))\n        .map(({ path, name, ...rest }) => ({\n          // Swap out any dynamic routes with their param values.\n          // E.g. \"/assets/:contractAddress\" will become \"/assets/0x...\"\n          path: Object.keys(params).length\n            ? Object.keys(params).reduce(\n                (path, param) => path.replace(`:${param}`, params[param]),\n                path\n              )\n            : path,\n          // Swap out any dynamic route names with their param values.\n          // E.g. \":contractAddress\" will become \"0x...\"\n          // E.g. \":tokenId\" will become \"Asset Name\"\n          name: Object.keys(params).length\n            ? Object.keys(params).reduce((name, param) => {\n                // TODO: doesn't update name on page change\n                // if (param === \"tokenId\") {\n                //   return name.replace(`:${param}`, asset.data.name);\n                // } else\n                if (param === \"contractAddress\") {\n                  let collection = collections?.data.find(\n                    (item) => item.contractAddress === params[param]\n                  );\n                  return name.replace(`:${param}`, collection?.name);\n                } else {\n                  return name.replace(`:${param}`, params[param]);\n                }\n              }, name)\n            : name,\n          ...rest,\n        }))\n        .map(({ path, ...rest }) => ({\n          path,\n          current: [path].includes(location.pathname),\n          isHome: path === ROUTE_DEFAULT,\n          ...rest,\n        }))\n    );\n  };\n\n  if (matchHome) {\n    return <main className=\"min-w-0 flex-1 overflow-y-scroll\">{children}</main>;\n  }\n\n  return (\n    <>\n      {/* <Breadcrumbs crumbs={crumbs} /> */}\n      <main className=\"min-w-0 flex-1 overflow-y-scroll\">{children}</main>\n    </>\n  );\n}\n","import ReactLoading from \"react-loading\";\n\nexport interface PureUserNftListProps {\n  loading?: boolean;\n  items: Array<any>;\n}\n\nexport const PureUserNftList = ({\n  loading = false,\n  items,\n}: PureUserNftListProps) => {\n  if (loading) {\n    return (\n      <ReactLoading\n        type='bubbles'\n        color='currentColor'\n        className='text-blue-600 dark:text-blue-500'\n      />\n    );\n  }\n\n  return (\n    <div className='grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4'>\n      {items.length === 0 ? (\n        <h1 className='text-2xl'>No assets owned</h1>\n      ) : (\n        items.map((item: any, idx: any) => (\n          <div key={idx} className='border shadow rounded-xl overflow-hidden'>\n            <img src={item.image} className='rounded' alt='' />\n            <div className='p-4 bg-black'>\n              <p className='text-2xl font-bold text-white'>\n                Price - {item.price} Eth\n              </p>\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport axios from \"axios\";\nimport convertIpfsUrl from \"../../utils/convertIpfsUrl\";\nimport ContractAddresses from \"../../contracts/contract-address.json\";\nimport Continents from \"../../contracts/Continents.json\";\nimport Marketplace from \"../../contracts/Marketplace.json\";\nimport { PureUserNftList } from \"./UserNftList\";\n\nconst UserNftList = () => {\n  const { library } = useWeb3React<Web3Provider>();\n  const [items, setItems] = useState<Array<any>>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    loadNFTs();\n  }, []);\n\n  const loadNFTs = async () => {\n    const signer = library?.getSigner();\n\n    const marketContract = new ethers.Contract(\n      ContractAddresses.Marketplace,\n      Marketplace.abi,\n      signer\n    );\n    const tokenContract = new ethers.Contract(\n      ContractAddresses.Continents,\n      Continents.abi,\n      library\n    );\n    const data = await marketContract.fetchMyNFTs();\n\n    const items = await Promise.all(\n      data.map(async (item: any) => {\n        const tokenUri = tokenContract.uri\n          ? await tokenContract.uri(item.tokenId)\n          : await tokenContract.tokenURI(item.tokenId);\n        const meta = await axios.get(tokenUri);\n        let price = ethers.utils.formatUnits(item.price.toString(), \"ether\");\n        let formattedItem = {\n          price,\n          tokenId: item.tokenId.toNumber(),\n          seller: item.seller,\n          owner: item.owner,\n          image: convertIpfsUrl(meta.data.image),\n        };\n        return formattedItem;\n      })\n    );\n    setItems(items);\n    setLoading(false);\n  };\n\n  return <PureUserNftList loading={loading} items={items} />;\n};\n\nexport default UserNftList;\n","import { WalletAddress } from \"./WalletAddress\";\nexport default WalletAddress;\n","import React from \"react\";\nimport ReactLoading from \"react-loading\";\nimport { TEXT_ADDRESS } from \"../../constants/text\";\n\nexport interface WalletAddressProps {\n  address: string | null | undefined;\n  loading?: boolean;\n}\n\nexport const WalletAddress: React.FC<WalletAddressProps> = ({\n  address,\n  loading,\n}) => {\n  return (\n    <div>\n      <h1 className='text-sm uppercase font-medium text-gray-500 dark:text-gray-400'>\n        {TEXT_ADDRESS}\n      </h1>\n      {loading ? (\n        <ReactLoading\n          type='bubbles'\n          color='currentColor'\n          className='text-blue-600 dark:text-blue-500'\n        />\n      ) : address ? (\n        <p className='mt-2 font-medium text-gray-900 dark:text-gray-200 overflow-hidden overflow-ellipsis'>\n          {address}\n        </p>\n      ) : (\n        <p className='mt-2 font-medium text-gray-900 dark:text-gray-200 overflow-hidden overflow-ellipsis'>\n          Not connected\n        </p>\n      )}\n    </div>\n  );\n};\n","import Button from \"../Button\";\n\nexport interface PureChainAddButtonProps {\n  label: string;\n  disabled?: boolean;\n  onClick?: () => void;\n}\n\nexport const PureChainAddButton = ({\n  label,\n  disabled = false,\n  onClick,\n}: PureChainAddButtonProps) => {\n  return (\n    <Button onClick={onClick} disabled={disabled}>\n      {label}\n    </Button>\n  );\n};\n","// import { Web3Provider } from \"@ethersproject/providers\";\n// import { useWeb3React } from \"@web3-react/core\";\nimport { PureChainAddButton } from \"./ChainAddButton\";\n\nconst ChainAddButton = ({\n  label,\n  disabled,\n  params,\n}: {\n  label: string;\n  disabled?: boolean;\n  params: any;\n}) => {\n  // const { connector, library } = useWeb3React<Web3Provider>();\n  const onClick = async () => {\n    try {\n      // @ts-ignore\n      await ethereum.request({\n        method: \"wallet_addEthereumChain\",\n        params: [params],\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <PureChainAddButton onClick={onClick} disabled={disabled} label={label} />\n  );\n};\n\nexport default ChainAddButton;\n","import { TEXT_SWITCH } from \"../../constants/text\";\nimport {\n  AVALANCHE_MAINNET_PARAMS,\n  AVALANCHE_TESTNET_PARAMS,\n  ChainId,\n} from \"../../constants\";\nimport ChainAddButton from \"../ChainAddButton\";\n\nexport interface PureNetworkSwitchProps {\n  chainId?: number;\n}\n\nexport const PureNetworkSwitch = ({ chainId }: PureNetworkSwitchProps) => {\n  return (\n    <div>\n      <h1 className='text-sm uppercase font-medium text-gray-500 dark:text-gray-400'>\n        {TEXT_SWITCH}\n      </h1>\n      <div className='mt-2 flex space-x-4'>\n        <ChainAddButton\n          label='Use Avalanche'\n          disabled={chainId === ChainId.AVALANCHE}\n          params={AVALANCHE_MAINNET_PARAMS}\n        />\n        <ChainAddButton\n          label='Use Fuji Testnet'\n          disabled={chainId === ChainId.FUJI}\n          params={AVALANCHE_TESTNET_PARAMS}\n        />\n      </div>\n    </div>\n  );\n};\n","import { Web3Provider } from \"@ethersproject/providers\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { PureNetworkSwitch } from \"./NetworkSwitch\";\n\nconst NetworkSwitch = () => {\n  const { chainId } = useWeb3React<Web3Provider>();\n\n  return <PureNetworkSwitch chainId={chainId} />;\n};\n\nexport default NetworkSwitch;\n","import { Fragment } from \"react\";\nimport ReactLoading from \"react-loading\";\nimport { Tab } from \"@headlessui/react\";\n// import { SWRConfig } from \"swr\";\n// import fetcher from \"swr-eth\";\n// import { AVALANCHE_MAINNET_PARAMS } from \"../../constants\";\nimport { NATIVE_CURRENCY } from \"../../constants\";\nimport {\n  // TEXT_BALANCE,\n  TEXT_NETWORK,\n  // TEXT_ADD_FUNDS,\n} from \"../../constants/text\";\nimport ContentWrapper from \"../../ContentWrapper\";\n// import EthBalance from \"../EthBalance\";\n// import TokenList from \"../TokenList\";\nimport UserNftList from \"../../components/UserNftList\";\nimport OnboardingButton from \"../../components/OnboardingButton\";\nimport WalletAddress from \"../../components/WalletAddress\";\nimport NetworkSwitch from \"../../components/NetworkSwitch\";\n// import ChainAddButton from \"../../components/ChainAddButton\";\n\nexport interface PureAccountPageProps {\n  connected?: boolean;\n  network?: string;\n  address?: string | null;\n  chainId?: any;\n  loading?: boolean;\n  owned: Array<any>;\n  sold: Array<any>;\n}\n\nexport const PureAccountPage = ({\n  connected,\n  network,\n  address,\n  chainId,\n  loading = false,\n  owned,\n  sold,\n}: PureAccountPageProps) => {\n  const tabs = [\"Owned\", \"Sales\", \"Network Info\"];\n\n  if (loading) {\n    return (\n      <ReactLoading\n        type='bubbles'\n        color='currentColor'\n        className='text-blue-600 dark:text-blue-500'\n      />\n    );\n  }\n\n  return (\n    <ContentWrapper>\n      <Tab.Group>\n        <Tab.List className='border-b border-gray-300 dark:border-gray-800'>\n          {tabs.map((tab, idx) => (\n            <Tab as={Fragment} key={idx}>\n              {({ selected }) => (\n                <button\n                  className={[\n                    \"w-1/3 py-4 px-1 text-center border-b-2 font-medium text-sm\",\n                    selected\n                      ? \"border-blue-500 text-blue-600\"\n                      : \"border-transparent text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-800\",\n                  ].join(\" \")}>\n                  {tab}\n                </button>\n              )}\n            </Tab>\n          ))}\n        </Tab.List>\n        <Tab.Panels className='p-4 sm:p-8 max-w-8xl'>\n          <Tab.Panel>\n            <UserNftList />\n            {/* <div className='mb-4'>\n              <h2 className='text-2xl py-2'>Items Created</h2>\n              <div className='grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4'>\n                {owned.length === 0 ? (\n                  <h1 className='text-2xl'>No assets created</h1>\n                ) : (\n                  owned.map((item, idx) => (\n                    <div\n                      key={idx}\n                      className='border shadow rounded-xl overflow-hidden'>\n                      <img src={item.image} className='rounded' alt='' />\n                      <div className='p-4 bg-black'>\n                        <p className='text-2xl font-bold text-white'>\n                          Price - {item.price}{\" \"}\n                          {(chainId && NATIVE_CURRENCY[chainId]) ||\n                            NATIVE_CURRENCY[0]}\n                        </p>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </div> */}\n          </Tab.Panel>\n\n          <Tab.Panel>\n            {sold.length && (\n              <div className='mt-4'>\n                <h2 className='text-2xl py-2'>Items sold</h2>\n                <div className='grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4'>\n                  {sold.map((item, idx) => (\n                    <div\n                      key={idx}\n                      className='border shadow rounded-xl overflow-hidden'>\n                      <img src={item.image} className='rounded' alt='' />\n                      <div className='p-4 bg-black'>\n                        <p className='text-2xl font-bold text-white'>\n                          Price - {item.price}{\" \"}\n                          {(chainId && NATIVE_CURRENCY[chainId]) ||\n                            NATIVE_CURRENCY[0]}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </Tab.Panel>\n\n          <Tab.Panel className='space-y-8'>\n            <WalletAddress address={address} loading={false} />\n\n            <div>\n              <h1 className='text-sm uppercase font-medium text-gray-500 dark:text-gray-400'>\n                {TEXT_NETWORK}\n              </h1>\n              {connected ? (\n                <p className='mt-2 font-medium text-gray-900 dark:text-gray-200 overflow-hidden overflow-ellipsis'>\n                  {network}\n                </p>\n              ) : (\n                <div className='mt-2'>\n                  <OnboardingButton />\n                </div>\n              )}\n            </div>\n\n            {connected && <NetworkSwitch />}\n\n            {/* <div>\n              <h1 className='text-sm uppercase font-medium text-gray-500 dark:text-gray-400'>\n                {TEXT_BALANCE}\n              </h1>\n              <div className='mt-2 font-medium text-gray-900 dark:text-gray-200 overflow-hidden overflow-ellipsis'>\n                {library && (\n                  <SWRConfig value={{ fetcher: fetcher(library, new Map(ABIs)) }}>\n                    <EthBalance />\n                    <TokenList chainId={chainId} />\n                  </SWRConfig>\n                )}\n              </div>\n            </div> */}\n\n            {/* <div>\n              <h1 className='text-sm uppercase font-medium text-gray-500 dark:text-gray-400'>\n                {TEXT_ADD_FUNDS}\n              </h1>\n              {chainId === 43114 ? (\n                <p className='mt-2 font-medium text-gray-900 dark:text-gray-200 overflow-hidden overflow-ellipsis'>\n                  Purchase AVAX from an exchange and send it to the X-Chain address\n                  in your wallet at{\" \"}\n                  <a\n                    href='https://wallet.avax.network/'\n                    target='_blank'\n                    rel='noreferrer'\n                    className='text-blue-600 font-medium'>\n                    https://wallet.avax.network/\n                  </a>\n                  .<br />\n                  Make a Cross Chain transfer to get funds on the C-Chain.\n                  <br />\n                  Send AVAX from your C-Chain address to your MetaMask address (this\n                  is also a C-Chain address).\n                </p>\n              ) : chainId === 43113 ? (\n                <p className='mt-2 font-medium text-gray-900 dark:text-gray-200 overflow-hidden overflow-ellipsis'>\n                  Request tokens from the{\" \"}\n                  <a\n                    href='https://faucet.avax-test.network/'\n                    target='_blank'\n                    rel='noreferrer'\n                    className='text-blue-600 font-medium'>\n                    AVAX Test Faucet.\n                  </a>\n                </p>\n              ) : (\n                <p className='mt-2 font-medium text-gray-900 dark:text-gray-200 overflow-hidden overflow-ellipsis'>\n                  Unsupported network.\n                </p>\n              )}\n            </div> */}\n          </Tab.Panel>\n        </Tab.Panels>\n      </Tab.Group>\n    </ContentWrapper>\n  );\n};\n","import { useEffect, useState } from \"react\";\n// import { useMemo } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\n// import { SWRConfig } from \"swr\";\n// import fetcher from \"swr-eth\";\nimport convertIpfsUrl from \"../../utils/convertIpfsUrl\";\nimport ContractAddresses from \"../../contracts/contract-address.json\";\nimport Continents from \"../../contracts/Continents.json\";\nimport Marketplace from \"../../contracts/Marketplace.json\";\nimport {\n  // TOKENS_BY_NETWORK,\n  NETWORK_LABELS,\n} from \"../../constants\";\nimport { PureAccountPage } from \"./AccountPage\";\n\n// This is an error code that indicates that the user canceled a transaction\n// const ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n\nconst AccountPage = () => {\n  const { chainId, account, library } = useWeb3React<Web3Provider>();\n  const [items, setItems] = useState<Array<any>>([]);\n  const [sold, setSold] = useState<Array<any>>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    loadNFTs();\n  }, []);\n\n  const loadNFTs = async () => {\n    const signer = library?.getSigner();\n\n    const marketContract = new ethers.Contract(\n      ContractAddresses.Marketplace,\n      Marketplace.abi,\n      signer\n    );\n    const tokenContract = new ethers.Contract(\n      ContractAddresses.Continents,\n      Continents.abi,\n      library\n    );\n    const data = await marketContract.fetchItemsCreated();\n\n    const items = await Promise.all(\n      data.map(async (item: any) => {\n        const tokenUri = tokenContract.uri\n          ? await tokenContract.uri(item.tokenId)\n          : await tokenContract.tokenURI(item.tokenId);\n        const meta = await axios.get(tokenUri);\n        let price = ethers.utils.formatUnits(item.price.toString(), \"ether\");\n        let formattedItem = {\n          price,\n          tokenId: item.tokenId.toNumber(),\n          seller: item.seller,\n          owner: item.owner,\n          sold: item.sold,\n          image: convertIpfsUrl(meta.data.image),\n        };\n        return formattedItem;\n      })\n    );\n    /* create a filtered array of items that have been sold */\n    const soldItems = items.filter((item: any) => item.sold);\n    setSold(soldItems);\n    setItems(items);\n    setLoading(false);\n  };\n\n  // [\n  //   [ 0x00001, JSONABI ]\n  // ]\n  // const ABIs: any[] = useMemo(() => {\n  //   if (chainId) {\n  //     return (\n  //       TOKENS_BY_NETWORK[chainId] || []\n  //     ).map(({ address, abi }: { address: string; abi: any }) => [\n  //       address,\n  //       abi,\n  //     ]);\n  //   } else {\n  //     return [];\n  //   }\n  // }, [chainId]);\n\n  return (\n    <PureAccountPage\n      network={(chainId && NETWORK_LABELS[chainId]) || \"\"}\n      address={account}\n      chainId={chainId}\n      connected={!!chainId}\n      loading={loading}\n      owned={items}\n      sold={sold}\n    />\n  );\n};\n\nexport default AccountPage;\n","import {\n    GET_ASSET_STARTED, GET_ASSET_SUCCESS, GET_ASSET_FAILURE\n} from \"./actionTypes\";\n\n// to get the asset - started\nexport const getAssetStarted = () => {\n    return {\n        type: GET_ASSET_STARTED\n    }\n}\n\n// to get the asset - success\nexport const getAssetSuccess = (data: any) => {\n    return {\n        type: GET_ASSET_SUCCESS,\n        payload: {\n            data\n        }\n    }\n}\n\n// to get the asset - failure\nexport const getAssetFailure = (error: any) => {\n    return {\n        type: GET_ASSET_FAILURE,\n        payload: {\n            error\n        }\n    }\n}","import { Disclosure, Transition } from \"@headlessui/react\";\nimport { ChevronUpIcon, ChevronDownIcon } from \"@heroicons/react/solid\";\n\nexport interface AttrDisclosureProps {\n    attrs?: Array<any>;\n}\n\nexport const AttributeDisclosure = ({ attrs }: AttrDisclosureProps) => {\n    return (\n        <Disclosure defaultOpen={true} as=\"div\">\n            {({ open }) => (\n                <>\n                    <Disclosure.Button className=\"p-4 border border-gray-300 dark:border-gray-700 w-full text-left flex items-center justify-between\">\n                        <span className=\"font-semibold\">Traits</span>\n                        {open ? (\n                            <ChevronUpIcon className=\"w-4 h-4\" />\n                        ) : (\n                            <ChevronDownIcon className=\"w-4 h-4\" />\n                        )}\n                    </Disclosure.Button>\n                    <Transition\n                        enter=\"transition duration-100 ease-out\"\n                        enterFrom=\"transform scale-95 opacity-0\"\n                        enterTo=\"transform scale-100 opacity-100\"\n                        leave=\"transition duration-75 ease-out\"\n                        leaveFrom=\"transform scale-100 opacity-100\"\n                        leaveTo=\"transform scale-95 opacity-0\"\n                    >\n                        <Disclosure.Panel className=\"grid grid-cols-3 gap-3 p-4 border border-t-0 border-gray-300 dark:border-gray-700 bg-gray-100 dark:bg-gray-800\">\n                            {attrs?.map((attr: any) => (\n                                <div key={attr.trait_type} className=\"w-full p-2 border border-blue-500 rounded uppercase text-center\">\n                                    <div className=\"text-xs font-medium text-blue-500 mb-1\">{attr.trait_type}</div>\n                                    <div className=\"text-sm\">{attr.value}</div>\n                                </div>\n                            ))}\n                        </Disclosure.Panel>\n                    </Transition>\n                </>\n            )}\n        </Disclosure>\n    );\n};","import { Disclosure, Transition } from \"@headlessui/react\";\nimport { ChevronUpIcon, ChevronDownIcon } from \"@heroicons/react/solid\";\nimport { TEXT_NETWORK, TEXT_CONTRACT, TEXT_ID } from \"../../constants/text\";\n\nexport interface DetailsDisclosureProps {\n    contractAddress: string;\n    network: string;\n    tokenId: string;\n}\n\nexport const DetailsDisclosure = ({ contractAddress, network, tokenId }: DetailsDisclosureProps) => {\n    return (\n        <Disclosure defaultOpen={true} as=\"div\">\n            {({ open }) => (\n                <>\n                    <Disclosure.Button className=\"p-4 border border-gray-300 dark:border-gray-700 w-full text-left flex items-center justify-between\">\n                        <span className=\"font-semibold\">Details</span>\n                        {open ? (\n                            <ChevronUpIcon className=\"w-4 h-4\" />\n                        ) : (\n                            <ChevronDownIcon className=\"w-4 h-4\" />\n                        )}\n                    </Disclosure.Button>\n                    <Transition\n                        enter=\"transition duration-100 ease-out\"\n                        enterFrom=\"transform scale-95 opacity-0\"\n                        enterTo=\"transform scale-100 opacity-100\"\n                        leave=\"transition duration-75 ease-out\"\n                        leaveFrom=\"transform scale-100 opacity-100\"\n                        leaveTo=\"transform scale-95 opacity-0\"\n                    >\n                        <Disclosure.Panel className=\"p-4 border border-t-0 border-gray-300 dark:border-gray-700 bg-gray-100 dark:bg-gray-800 text-xs\">\n                            <div className=\"flex items-center justify-between\">\n                                <span>{TEXT_CONTRACT}</span>\n                                {/* TODO: use network blockExplorer */}\n                                <a\n                                    href={`https://snowtrace.io/address/${contractAddress}`}\n                                    className=\"link truncate pl-3\"\n                                    target=\"_blank\"\n                                    rel=\"noreferrer\">\n                                    {contractAddress}\n                                </a>\n                            </div>\n\n                            <div className=\"flex items-center justify-between mt-3\">\n                                <span>{TEXT_ID}</span>\n                                <span>{tokenId}</span>\n                            </div>\n\n                            <div className=\"flex items-center justify-between mt-3\">\n                                <span>{TEXT_NETWORK}</span>\n                                <span>{network}</span>\n                            </div>\n                        </Disclosure.Panel>\n                    </Transition>\n                </>\n            )}\n        </Disclosure>\n    );\n};","export default __webpack_public_path__ + \"static/media/Avalanche_AVAX_RedWhite.e1fb45e8.png\";","import { Disclosure, Transition } from \"@headlessui/react\";\nimport { ChevronUpIcon, ChevronDownIcon } from \"@heroicons/react/solid\";\nimport { Avax } from \"../../assets\";\nimport {\n    TEXT_BUY,\n    TEXT_CURRENT_PRICE,\n    TEXT_SELL,\n} from \"../../constants/text\";\nimport Button from \"../Button\";\n\nexport interface ListingDisclosureProps {\n    item: any;\n    onCreateListing?: () => void;\n    onBuyAsset?: () => void;\n}\n\nexport const ListingDisclosure = ({ item, onCreateListing, onBuyAsset }: ListingDisclosureProps) => {\n    return (\n        <Disclosure defaultOpen={true} as=\"div\">\n            {({ open }) => (\n                <>\n                    <Disclosure.Button className=\"p-4 border border-gray-300 dark:border-gray-700 w-full text-left flex items-center justify-between\">\n                        <span className=\"font-semibold\">Listing</span>\n                        {open ? (\n                            <ChevronUpIcon className=\"w-4 h-4\" />\n                        ) : (\n                            <ChevronDownIcon className=\"w-4 h-4\" />\n                        )}\n                    </Disclosure.Button>\n                    <Transition\n                        enter=\"transition duration-100 ease-out\"\n                        enterFrom=\"transform scale-95 opacity-0\"\n                        enterTo=\"transform scale-100 opacity-100\"\n                        leave=\"transition duration-75 ease-out\"\n                        leaveFrom=\"transform scale-100 opacity-100\"\n                        leaveTo=\"transform scale-95 opacity-0\"\n                    >\n                        <Disclosure.Panel className=\"p-4 border border-t-0 border-gray-300 dark:border-gray-700 bg-gray-100 dark:bg-gray-800 text-xs\">\n                            <h1 className='text-base font-medium text-gray-600 dark:text-gray-300'>\n                                {TEXT_CURRENT_PRICE}\n                            </h1>\n                            <div className='mt-2 flex items-center'>\n                                {/* TODO: allow other currency logos */}\n                                {/* {(chainId && NATIVE_CURRENCY[chainId]) || NATIVE_CURRENCY[0]} */}\n                                <img src={Avax} alt='AVAX logo' className='w-6 h-6 mr-2' />\n                                <span className='text-2xl font-semibold text-gray-900 dark:text-gray-200'>{item.price}</span>\n                            </div>\n\n                            <div className='mt-4'>\n                                {item.sold ? (\n                                    <Button\n                                        size='medium'\n                                        primary={true}\n                                        onClick={onCreateListing}\n                                        disabled={false}>\n                                        {TEXT_SELL}\n                                    </Button>\n                                ) : (\n                                    <Button\n                                        size='medium'\n                                        primary={true}\n                                        onClick={onBuyAsset}\n                                        disabled={false}>\n                                        {TEXT_BUY}\n                                    </Button>\n                                )}\n                            </div>\n                        </Disclosure.Panel>\n                    </Transition>\n                </>\n            )}\n        </Disclosure>\n    );\n};","export default __webpack_public_path__ + \"static/media/globe.2c2ad013.png\";","export default __webpack_public_path__ + \"static/media/logo.1942939c.png\";","export default __webpack_public_path__ + \"static/media/marker.010eee72.svg\";","// import { useEffect, useState } from \"react\";\nimport { NavLink, useLocation } from \"react-router-dom\";\nimport ReactLoading from \"react-loading\";\n// import { Web3Provider } from \"@ethersproject/providers\";\n// import { useWeb3React } from \"@web3-react/core\";\nimport { BadgeCheckIcon, ExclamationIcon } from \"@heroicons/react/solid\";\nimport { NETWORK_LABELS_SHORT } from '../../constants';\n// import { NATIVE_CURRENCY } from \"../../constants\";\nimport {\n  TEXT_DESCRIPTION,\n  // TEXT_LOCATION,\n  // TEXT_CONTRACT,\n  // TEXT_ID,\n  TEXT_OWNER,\n} from \"../../constants/text\";\nimport { ROUTE_MARKETPLACE } from \"../../constants/routes\";\nimport { NFT } from \"../../typings/nft\";\nimport { AttributeDisclosure } from '../Disclosures/AttributeDisclosure';\nimport { DetailsDisclosure } from '../Disclosures/DetailsDisclosure';\nimport { ListingDisclosure } from '../Disclosures/ListingDisclosure';\n// import RarityBadge from \"../RarityBadge\";\n\nexport interface PureAssetViewProps {\n  item?: NFT;\n  collection?: any;\n  onBuyAsset?: () => void;\n  onCreateListing?: () => void;\n  connected?: boolean;\n  loading?: boolean;\n  account?: any;\n}\n\nexport const PureAssetView = ({\n  item,\n  collection,\n  onBuyAsset,\n  onCreateListing,\n  connected,\n  loading = false,\n  account,\n}: PureAssetViewProps) => {\n  const location = useLocation();\n  const path = `${ROUTE_MARKETPLACE}/${collection?.contractAddress}`;\n  // const { chainId } = useWeb3React<Web3Provider>();\n  // const [latitude, setLatitude] = useState<number | string>(0);\n  // const [longitude, setLongitude] = useState<number | string>(0);\n\n  // useEffect(() => {\n  //   let lat =\n  //     item?.attributes?.find((attr) => attr.trait_type === \"Latitude\")?.value ||\n  //     0;\n  //   let lng =\n  //     item?.attributes?.find((attr) => attr.trait_type === \"Longitude\")\n  //       ?.value || 0;\n\n  //   setLatitude(lat);\n  //   setLongitude(lng);\n  // }, [item]);\n\n  if (loading) {\n    return (\n      <ReactLoading\n        type='bubbles'\n        color='currentColor'\n        className='text-blue-600 dark:text-blue-500'\n      />\n    );\n  }\n\n  if (item && collection) {\n    return (\n      <div className=\"flex flex-col lg:flex-row\">\n        <div className='mb-3 lg:w-1/3'>\n          <div className='mb-3 w-60 lg:w-auto'>\n            <div className='aspect-w-1 aspect-h-1'>\n              <img src={item.image} alt={item.name} />\n            </div>\n          </div>\n\n          <div className=\"mb-3\">\n            {/* TODO: replace attrs */}\n            <AttributeDisclosure attrs={[\n              {\n                \"display_type\": \"number\",\n                \"trait_type\": \"Latitude\",\n                \"value\": -3.064382331\n              },\n              {\n                \"display_type\": \"number\",\n                \"trait_type\": \"Longitude\",\n                \"value\": 37.35792304\n              }]} />\n          </div>\n\n          <DetailsDisclosure network={NETWORK_LABELS_SHORT[collection.network]} contractAddress={collection.contractAddress} tokenId={item.tokenId} />\n        </div>\n\n        <div className='mb-3 lg:ml-8 flex-1 order-first lg:order-last'>\n          <NavLink\n            to={path}\n            exact={true}\n            className='text-sm text-gray-600 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-300 flex items-center mb-1'\n            aria-current={[path].includes(location.pathname) ? \"page\" : undefined}\n          >\n            {collection?.name}\n            {!!collection?.verified ? (\n              <BadgeCheckIcon className='w-4 h-4 text-blue-500 ml-1' />\n            ) : (\n              <ExclamationIcon className='w-4 h-4 text-yellow-500 ml-1' />\n            )}\n          </NavLink>\n          <h3 className='text-3xl uppercase font-medium text-gray-900 dark:text-white'>\n            {item.name}\n          </h3>\n\n          <div className='mt-6'>\n            <h1 className='text-sm uppercase font-medium text-gray-500 dark:text-gray-400'>\n              {TEXT_DESCRIPTION}\n            </h1>\n            <p className='mt-2 font-medium text-gray-900 dark:text-gray-200 overflow-hidden overflow-ellipsis'>\n              {item.description}\n            </p>\n          </div>\n\n          {/* <div className='mt-6'>\n            <h1 className='text-sm uppercase font-medium text-gray-500 dark:text-gray-400'>\n              {TEXT_LOCATION}\n            </h1>\n            <p className='mt-2 font-medium text-gray-900 dark:text-gray-200 overflow-hidden overflow-ellipsis'>\n              [{item.lat}, {item.lng}]\n            </p>\n          </div> */}\n\n          {/* <div className='mt-6'>\n            <h1 className='text-sm uppercase font-medium text-gray-500 dark:text-gray-400'>\n              {TEXT_CONTRACT}\n            </h1>\n            <p className='mt-2 font-medium text-gray-900 dark:text-gray-200 overflow-hidden overflow-ellipsis capitalize'>\n              {collection.contractAddress}\n            </p>\n          </div> */}\n\n          {/* <div className='mt-6'>\n            <h1 className='text-sm uppercase font-medium text-gray-500 dark:text-gray-400'>\n              {TEXT_ID}\n            </h1>\n            <p className='mt-2 font-medium text-gray-900 dark:text-gray-200 overflow-hidden overflow-ellipsis'>\n              {item.tokenId}\n            </p>\n          </div> */}\n\n          <div className='mt-6'>\n            <h1 className='text-sm uppercase font-medium text-gray-500 dark:text-gray-400'>\n              {TEXT_OWNER}\n            </h1>\n            <p className='mt-2 font-medium text-gray-900 dark:text-gray-200 overflow-hidden overflow-ellipsis capitalize'>\n              {item.owner_address === account ? (\n                \"You\"\n              ) : item.owner_address}\n            </p>\n          </div>\n\n          <div className=\"mt-8\">\n            <ListingDisclosure item={item} onCreateListing={onCreateListing} onBuyAsset={onBuyAsset} />\n          </div>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <h2>Unable to load Asset.</h2>\n    );\n  }\n};\n","import { useEffect, useState } from \"react\";\n// import { useParams } from \"react-router\";\n// import Web3 from \"web3\";\n// import { AbiItem } from \"web3-utils\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { ethers } from \"ethers\";\n// import BN from \"bn.js\";\n// import { buyNftEndpoint } from \"../../http\";\n// eslint-disable-next-line\nimport { Collection, NFT } from \"../../typings/nft\";\n// import { WALLET_ADDRESS } from \"../../constants\";\n// import NFTABI from \"../../abi/NFTABI.json\";\n// import Continents from \"../../contracts/Continents.json\";\nimport ContractAddresses from \"../../contracts/contract-address.json\";\nimport Marketplace from \"../../contracts/Marketplace.json\";\nimport { useAppDispatch, useAppSelector } from \"../../state/hooks\";\n// import { getCollections } from \"../../state/asyncActions/collections\";\n// import { getCollection } from \"../../state/asyncActions/collection\";\nimport { getAsset } from \"../../state/asyncActions/asset\";\nimport { PureAssetView } from \"./AssetView\";\n\nexport interface AssetViewProps {\n  contractAddress: string;\n  tokenId: string;\n}\n\nconst AssetView = ({ contractAddress, tokenId }: AssetViewProps) => {\n  const { account, library } = useWeb3React<Web3Provider>();\n  const dispatch = useAppDispatch();\n  const collections = useAppSelector((state) => state.collections.data);\n  const asset = useAppSelector((state) => state.asset.data);\n  const loading = useAppSelector((state) => state.asset.loading);\n  const [marketContract, setMarketContract] = useState<any>();\n  const [item, setItem] = useState<NFT>();\n  const [collection, setCollection] = useState<any>();\n  // const [web3State, setWeb3State] = useState<any>();\n  // const [accounts, setAccounts] = useState<any>();\n\n  useEffect(() => {\n    dispatch(getAsset(tokenId));\n  }, [tokenId]);\n\n  useEffect(() => {\n    if (asset?.status) {\n      setItem(asset?.data);\n    }\n  }, [asset]);\n\n  useEffect(() => {\n    const data = collections?.data.find(\n      (item: any) => item.contractAddress === contractAddress\n    );\n    setCollection(data);\n  }, []);\n\n  const onCreateListing = async () => {\n    console.log(\"create listing\");\n\n    try {\n      if (library) {\n        const provider = new ethers.providers.JsonRpcProvider();\n        const tokenContract = new Contract(\n          ContractAddresses.Marketplace,\n          Marketplace.abi,\n          provider\n        );\n\n        let listingPrice = await tokenContract.getListingPrice();\n        listingPrice = listingPrice.toString();\n\n        // const signer = library?.getSigner();\n        const market = new Contract(\n          ContractAddresses.Marketplace,\n          Marketplace.abi,\n          provider.getSigner()\n        );\n        setMarketContract(market);\n\n        // TODO: remove\n        await tokenContract.mint(1);\n        debugger;\n\n        const price = 2;\n        const val = ethers.utils.parseUnits(price.toString(), \"ether\");\n        // const val = new BN(price * 1e18) || 0;\n\n        const llitem = await market.createMarketItem(\n          ContractAddresses.Continents,\n          tokenId,\n          val,\n          { value: listingPrice }\n        );\n\n        // const price2 = await tokenContract.getListingPrice();\n        // const myitems = await tokenContract.fetchMyNFTs();\n        // const mitems = await tokenContract.fetchMarketItems();\n        // const citems = await tokenContract.fetchItemsCreated();\n      }\n    } catch (error) {\n      console.log(\"AssetView load error: \", error);\n    }\n  };\n\n  // require(\"dotenv\").config();\n  // const API_URL = process.env.API_URL;\n  // const PUBLIC_KEY = process.env.PUBLIC_KEY;\n  // const PRIVATE_KEY = process.env.PRIVATE_KEY;\n\n  // const { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\n  // const web3 = createAlchemyWeb3(API_URL);\n\n  // const contract = require(\"../artifacts/contracts/MyNFT.sol/MyNFT.json\");\n  // const nftContract = new web3.eth.Contract(contract.abi, ContractAddresses.Continents);\n\n  // async function mintNFT(tokenURI) {\n  //   const nonce = await web3.eth.getTransactionCount(PUBLIC_KEY, \"latest\"); //get latest nonce\n\n  //   //the transaction\n  //   const tx = {\n  //     from: PUBLIC_KEY,\n  //     to: ContractAddresses.Continents,\n  //     nonce: nonce,\n  //     gas: 500000,\n  //     maxPriorityFeePerGas: 1999999987,\n  //     data: nftContract.methods.mintNFT(PUBLIC_KEY, tokenURI).encodeABI(),\n  //   };\n\n  //   const signPromise = web3.eth.accounts.signTransaction(tx, PRIVATE_KEY);\n  //   signPromise\n  //     .then((signedTx: any) => {\n  //       web3.eth.sendSignedTransaction(\n  //         signedTx.rawTransaction,\n  //         function (err: any, hash: any) {\n  //           if (!err) {\n  //             console.log(\n  //               \"The hash of your transaction is: \",\n  //               hash,\n  //               \"\\nCheck Alchemy's Mempool to view the status of your transaction!\"\n  //             );\n  //           } else {\n  //             console.log(\n  //               \"Something went wrong when submitting your transaction:\",\n  //               err\n  //             );\n  //           }\n  //         }\n  //       );\n  //     })\n  //     .catch((err: any) => {\n  //       console.log(\"Promise failed:\", err);\n  //     });\n  // }\n\n  const getListing = async () => {\n    const provider = new ethers.providers.JsonRpcProvider();\n    const tokenContract = new Contract(\n      ContractAddresses.Marketplace,\n      Marketplace.abi,\n      provider\n    );\n    const mitems = await tokenContract.fetchMarketItems();\n    const itemListing = mitems.find(\n      (item: any) =>\n        item.tokenId === tokenId && item.nftContract === contractAddress\n    );\n\n    // setListing(itemListing);\n\n    // uint indexed itemId,\n    // address indexed nftContract,\n    // uint256 indexed tokenId,\n    // address seller,\n    // address owner,\n    // uint256 price,\n    // bool sold\n  };\n\n  useEffect(() => {\n    getListing();\n  }, []);\n\n  const onBuyAsset = async () => {\n    try {\n      console.log(\"buy\");\n      let ownerAddress = account;\n      let id = asset.data ? asset.data.id : \"\";\n      // const requestOptions = {\n      //   method: \"POST\",\n      //   headers: { \"Content-type\": \"application/json;charset=UTF-8\" },\n      //   body: JSON.stringify({\n      //     id,\n      //     ownerAddress,\n      //   }),\n      // };\n\n      // let fetchNftData = await fetch(buyNftEndpoint, requestOptions);\n      // console.log(fetchNftData);\n\n      // if (fetchNftData.status === 200) {\n      //   let price = asset.data ? asset.data.price.toString() : \"\";\n      //   let token_id = asset.data ? asset.data.tokenId.toString() : \"\";\n      //   token_id = --token_id;\n      //   let tradeCount = await contract.methods.getTradeCount().call();\n      //   tradeCount = --tradeCount;\n      //   const receipt = await contract.methods\n      //     .executeTrade(tradeCount, 0x00)\n      //     .send({ from: account, value: price });\n      //   console.log(\"after  transaction \", receipt);\n\n      //   // const val = (asset && new BN(asset.price * 1e18)) || 0;\n      //   try {\n      //     const transactionParameters = {\n      //       from: account,\n      //       to: WALLET_ADDRESS,\n      //       value: ethers.utils.hexValue(0),\n      //       gasPrice: ethers.utils.hexValue(225 * 1e9),\n      //       gas: ethers.utils.hexValue(21000),\n      //     };\n      //     // @ts-ignore\n      //     await ethereum\n      //       ?.request({\n      //         method: \"eth_sendTransaction\",\n      //         params: [transactionParameters],\n      //       })\n      //       .then((txHash: any) => console.log(txHash))\n      //       .catch((error: any) => console.error);\n      //   } catch (error) {\n      //     console.log(error);\n      //   }\n      // }\n    } catch (error) {\n      console.log(\"Error with onBuyAsset\", error);\n    }\n  };\n\n  // From tutorial\n  // eslint-disable-next-line\n  const onBuyAssetTut = async (nft: any) => {\n    const signer = library?.getSigner();\n    const contract = new Contract(\n      ContractAddresses.Marketplace,\n      Marketplace.abi,\n      signer\n    );\n\n    const price = ethers.utils.parseUnits(nft.price.toString(), \"ether\");\n    const transaction = await contract.createMarketSale(\n      nft.address,\n      nft.tokenId,\n      {\n        value: price,\n      }\n    );\n    await transaction.wait();\n    // loadNfts();\n  };\n\n  return (\n    <PureAssetView\n      item={item}\n      collection={collection}\n      onBuyAsset={onBuyAsset}\n      onCreateListing={onCreateListing}\n      connected={!!account}\n      loading={loading}\n      account={account}\n    />\n  );\n};\n\nexport default AssetView;\n","import {\n    getAssetStarted, getAssetSuccess, getAssetFailure\n} from \"../actions/asset\";\nimport { assetEndpoint } from '../../http';\n// import { nftEndpoint, getNftByOwnerEndpoint } from '../../http';\n\n// Asset\nexport const getAsset = (tokenId: string) => async (dispatch: any) => {\n    dispatch(getAssetStarted());\n    try {\n        const res = await fetch(`${assetEndpoint}?tokenId=${tokenId}`);\n        const data = await res.json();\n        dispatch(getAssetSuccess(data));\n    } catch (err: any) {\n        dispatch(getAssetFailure(err.message));\n    }\n};\n","// GET\nexport const adminNftListEndpoint: string = \"http://localhost:8080/list_admin_nft\";\nexport const collectionsEndpoint: string = \"http://localhost:8080/list_collections\";\nexport const collectionEndpoint: string = \"http://localhost:8080/get_collection\";\nexport const assetEndpoint: string = \"http://localhost:8080/get_asset\";\nexport const assetsEndpoint: string = \"http://localhost:8080/get_assets\";\n\nexport const getNftByOwnerEndpoint: string = \"http://localhost:8080/get_nft_by_owner_address\";\nexport const marketplaceEndpoint: string = \"http://localhost:8080/nft_market_place\";\n\n// POST\nexport const buyNftEndpoint: string = \"http://localhost:8080/buy_nft\";\nexport const saveNftEndpoint: string = \"http://localhost:8080/save_nft\"\nexport const updateNftEndpoint: string = \"http://localhost:8080/update_nft\"\nexport const deleteNftEndpoint: string = \"http://localhost:8080/delete_nft\"\nexport const nftMyReqEndpoint: string = \"http://localhost:8080/nft_my_req\"\nexport const isDeleteNftEndpoint: string = \"http://localhost:8080/is_delete_nft\"\nexport const updateIsDeleteNftEndpoint: string = \"http://localhost:8080/update_id_deleted\"\nexport const updateNftMintStatusEndpoint: string = \"http://localhost:8080/update_nft_mint_status\"\nexport const adminLoginEndpoint: string = \"http://localhost:8080/login\"\n","import { CardEmpty } from \"./CardEmpty\";\nexport default CardEmpty;\n","export const CardEmpty = () => {\n  return (\n    <div className='flex flex-col rounded-md overflow-hidden border-dashed border border-gray-400 dark:border-gray-700'>\n      <div className='flex-shrink-0 w-full'>\n        <div className='h-60'></div>\n      </div>\n      <div className='flex-1 bg-white dark:bg-gray-800 p-4 flex flex-col justify-between'>\n        <div className='flex-1'>\n          <p className='text-base font-semibold text-gray-900 dark:text-gray-100 capitalize'>\n            Nothing to display\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","// import { useState, useEffect } from \"react\";\n// import {\n//   useAppDispatch,\n//   useAppSelector\n// } from \"../../state/hooks\";\n// import { getCollectionList } from \"../../state/asyncActions/collections\";\n// import { Collection, NFT } from \"../../typings/nft\";\nimport { PureAssetCard } from \"./AssetCard\";\n\n// export interface AssetCardProps {\n//   nft: NFT;\n// }\n\n// const AssetCard = ({ nft }: AssetCardProps) => {\n//   // const dispatch = useAppDispatch();\n//   const collections = useAppSelector((state) => state.collections.data);\n//   const [collection, setCollection] = useState<Collection>();\n\n//   useEffect(() => {\n//     // dispatch(getCollections());\n\n//     const data = collections?.data.find(\n//       (collection: any) => collection.contractAddress === nft.contractAddress\n//     );\n\n//     setCollection(data);\n//   }, []);\n\n//   return <PureAssetCard nft={nft} />;\n// };\n\nexport default PureAssetCard;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { BadgeCheckIcon, ExclamationIcon } from \"@heroicons/react/solid\";\n// import { Web3Provider } from \"@ethersproject/providers\";\n// import { useWeb3React } from \"@web3-react/core\";\nimport { Avax } from \"../../assets\";\n// import { NATIVE_CURRENCY } from \"../../constants\";\nimport { ROUTE_MARKETPLACE } from \"../../constants/routes\";\nimport { NFT } from \"../../typings/nft\";\n\nexport interface PureAssetCardProps {\n  nft: NFT;\n  // collection?: Collection;\n}\n\nexport const PureAssetCard: React.FC<PureAssetCardProps> = ({\n  nft: { tokenId, contractAddress, name, image, sold, price, contractName, contractVerified },\n  // collection,\n}) => {\n  // const { chainId } = useWeb3React<Web3Provider>();\n\n  return (\n    <NavLink\n      to={`${ROUTE_MARKETPLACE}/${contractAddress}/${tokenId}`}\n      className='flex flex-col rounded-md shadow overflow-hidden transition-transform duration-300 transform hover:-translate-y-1'>\n      <div className='flex-shrink-0'>\n        <img className='h-54 w-full object-scale-down' src={image} alt={name} />\n      </div>\n      <div className='flex-1 bg-white dark:bg-gray-800 p-4 flex justify-between'>\n        <div className='flex-1'>\n          <p className='text-xs text-gray-600 dark:text-gray-400 flex items-center'>\n            {contractName}\n            {!!contractVerified ? (\n              <BadgeCheckIcon className='w-4 h-4 text-blue-500 ml-1' />\n            ) : (\n              <ExclamationIcon className='w-4 h-4 text-yellow-500 ml-1' />\n            )}\n          </p>\n          <p className='mt-1 text-sm font-semibold text-gray-900 dark:text-gray-100'>\n            {name}\n          </p>\n        </div>\n        {!sold && (\n          <div className='flex flex-col items-end'>\n            <p className='text-xs text-gray-600 dark:text-gray-400'>Price</p>\n            <div className='mt-1 flex items-center'>\n              {/* TODO: allow other currency logos */}\n              {/* {(chainId && NATIVE_CURRENCY[chainId]) || NATIVE_CURRENCY[0]} */}\n              <img src={Avax} alt='AVAX logo' className='w-3 h-3 mr-2' />\n              <span className='text-sm font-medium'>{price}</span>\n            </div>\n          </div>\n        )}\n      </div>\n    </NavLink>\n  );\n};\n","import { PureAssetGrid } from \"./AssetGrid\";\nexport default PureAssetGrid;\n","import ReactLoading from \"react-loading\";\nimport { NFT } from \"../../typings/nft\";\nimport CardEmpty from \"../CardEmpty\";\nimport AssetCard from \"../AssetCard\";\n\nexport interface PureAssetGridProps {\n  items: Array<NFT>;\n  loading?: boolean;\n}\n\nexport const PureAssetGrid = ({\n  items,\n  loading = false,\n}: PureAssetGridProps) => {\n  if (loading) {\n    return (\n      <ReactLoading\n        type='bubbles'\n        color='currentColor'\n        className='text-blue-600 dark:text-blue-500'\n      />\n    );\n  }\n\n  return (\n    <div className='grid gap-4 md:gap-6 grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5'>\n      {!items || items?.length === 0 ? (\n        <CardEmpty />\n      ) : (\n        items?.map((item: NFT, index: number) => (\n          <AssetCard key={index} nft={item} />\n        ))\n      )}\n    </div>\n  );\n};\n","import { NavLink } from \"react-router-dom\";\nimport { Disclosure, Transition } from \"@headlessui/react\";\nimport { ChevronUpIcon, ChevronDownIcon } from \"@heroicons/react/solid\";\nimport { ROUTE_MARKETPLACE } from \"../../constants/routes\";\nimport AssetGrid from \"../AssetGrid\";\n\nexport interface CollectionDisclosureProps {\n    contractAddress: string;\n    collection: any;\n}\n\nexport const CollectionDisclosure = ({ contractAddress, collection }: CollectionDisclosureProps) => {\n    return (\n        <Disclosure defaultOpen={true} as=\"div\">\n            {({ open }) => (\n                <>\n                    <Disclosure.Button className=\"p-4 border border-gray-300 dark:border-gray-700 w-full text-left flex items-center justify-between\">\n                        <span className=\"font-semibold\">More from this collection</span>\n                        {open ? (\n                            <ChevronUpIcon className=\"w-4 h-4\" />\n                        ) : (\n                            <ChevronDownIcon className=\"w-4 h-4\" />\n                        )}\n                    </Disclosure.Button>\n                    <Transition\n                        enter=\"transition duration-100 ease-out\"\n                        enterFrom=\"transform scale-95 opacity-0\"\n                        enterTo=\"transform scale-100 opacity-100\"\n                        leave=\"transition duration-75 ease-out\"\n                        leaveFrom=\"transform scale-100 opacity-100\"\n                        leaveTo=\"transform scale-95 opacity-0\"\n                    >\n                        <Disclosure.Panel className=\"p-4 border border-t-0 border-gray-300 dark:border-gray-700 bg-gray-100 dark:bg-gray-900 text-xs\">\n                            <AssetGrid items={collection.data} />\n                            <div className=\"mt-6 flex justify-around\">\n                                <NavLink\n                                    to={`${ROUTE_MARKETPLACE}/${contractAddress}`}\n                                    className='btn btn--primary'>\n                                    View Collection\n                                </NavLink>\n                            </div>\n                        </Disclosure.Panel>\n                    </Transition>\n                </>\n            )}\n        </Disclosure>\n    );\n};","import ReactLoading from \"react-loading\";\nimport ContentWrapper from \"../../ContentWrapper\";\nimport AssetView from \"../../components/AssetView\";\nimport { CollectionDisclosure } from \"../../components/Disclosures/CollectionDisclosure\";\n\nexport interface PureAssetPageProps {\n  collection?: any;\n  contractAddress: string;\n  tokenId: string;\n  loading?: boolean;\n}\n\nexport const PureAssetPage = ({\n  collection,\n  contractAddress,\n  tokenId,\n  loading = false,\n}: PureAssetPageProps) => {\n  if (loading) {\n    return (\n      <ContentWrapper>\n        <ReactLoading\n          type='bubbles'\n          color='currentColor'\n          className='text-blue-600 dark:text-blue-500'\n        />\n      </ContentWrapper>\n    );\n  }\n\n  return (\n    <ContentWrapper>\n      <div className='p-4 sm:p-8 max-w-8xl'>\n        <AssetView contractAddress={contractAddress} tokenId={tokenId} />\n\n        {collection && (\n          <CollectionDisclosure collection={collection} contractAddress={contractAddress} />\n        )}\n      </div>\n    </ContentWrapper>\n  );\n};\n","import {\n    GET_COLLECTION_STARTED, GET_COLLECTION_SUCCESS, GET_COLLECTION_FAILURE\n} from \"./actionTypes\";\n\n// to get the collection - started\nexport const getCollectionStarted = () => {\n    return {\n        type: GET_COLLECTION_STARTED\n    }\n}\n\n// to get the collection - success\nexport const getCollectionSuccess = (data: any) => {\n    return {\n        type: GET_COLLECTION_SUCCESS,\n        payload: {\n            data\n        }\n    }\n}\n\n// to get the collection - failure\nexport const getCollectionFailure = (error: any) => {\n    return {\n        type: GET_COLLECTION_FAILURE,\n        payload: {\n            error\n        }\n    }\n}","import {\n    getCollectionStarted, getCollectionSuccess, getCollectionFailure\n} from \"../actions/collection\";\nimport { collectionEndpoint } from '../../http';\n// import { nftEndpoint, getNftByOwnerEndpoint } from '../../http';\n\n// Collection\nexport const getCollection = (contractAddress: string) => async (dispatch: any) => {\n    dispatch(getCollectionStarted());\n    try {\n        const res = await fetch(`${collectionEndpoint}?contractAddress=${contractAddress}`);\n        const data = await res.json();\n        dispatch(getCollectionSuccess(data));\n    } catch (err: any) {\n        dispatch(getCollectionFailure(err.message));\n    }\n};;\n\n// export const getNft = (tokenId: string) => async (dispatch: any) => {\n//     dispatch(getCollectionStarted());\n//     try {\n//         const res = await fetch(`${nftEndpoint}?tokenId=${tokenId}`);\n//         const data = await res.json();\n//         dispatch(getCollectionSuccess(data));\n//     } catch (err: any) {\n//         dispatch(getCollectionFailure(err.message));\n//     }\n// }\n\n// export const getNftByOwner = (ownerAddress: string) => async (dispatch: any) => {\n//     dispatch(getCollectionStarted());\n//     try {\n//         const res = await fetch(`${getNftByOwnerEndpoint}?ownerAddress=${ownerAddress}`);\n//         const data = await res.json();\n//         dispatch(getCollectionSuccess(data));\n//     } catch (err: any) {\n//         dispatch(getCollectionFailure(err.message));\n//     }\n// }\n","import { useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useAppDispatch, useAppSelector } from \"../../state/hooks\";\nimport { PureAssetPage } from \"./AssetPage\";\nimport { getCollection } from \"../../state/asyncActions/collection\";\n\ninterface IParams {\n  contractAddress: string;\n  tokenId: string;\n}\n\nconst AssetPage = () => {\n  const { contractAddress, tokenId } = useParams<IParams>();\n  const collection = useAppSelector((state) => state.collection.data);\n  const loading = useAppSelector((state) => state.collection.loading);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(getCollection(contractAddress));\n  }, []);\n\n  return (\n    <PureAssetPage\n      collection={collection}\n      contractAddress={contractAddress}\n      tokenId={tokenId}\n      loading={loading}\n    />\n  );\n};\n\nexport default AssetPage;\n","import {\n    GET_COLLECTIONS_STARTED, GET_COLLECTIONS_SUCCESS, GET_COLLECTIONS_FAILURE\n} from \"./actionTypes\";\n\n// to get the list of collections - started\nexport const getCollectionsStarted = () => {\n    return {\n        type: GET_COLLECTIONS_STARTED\n    }\n}\n\n// to get the list of collections - success\nexport const getCollectionsSuccess = (data: any) => {\n    return {\n        type: GET_COLLECTIONS_SUCCESS,\n        payload: {\n            data\n        }\n    }\n}\n\n// to get the list of collections - failure\nexport const getCollectionsFailure = (error: any) => {\n    return {\n        type: GET_COLLECTIONS_FAILURE,\n        payload: {\n            error\n        }\n    }\n}","import { PureCollectionCard } from \"./CollectionCard\";\n\nexport default PureCollectionCard;\n","import { Link } from \"react-router-dom\";\nimport { BadgeCheckIcon, ExclamationIcon } from \"@heroicons/react/solid\";\nimport { Collection } from \"../../typings/nft\";\nimport { ROUTE_MARKETPLACE } from \"../../constants/routes\";\n\nexport interface PureCollectionCardProps {\n  collection: Collection;\n}\n\nexport const PureCollectionCard = ({\n  collection: { name, thumbnail, contractAddress, verified, network },\n}: PureCollectionCardProps) => {\n  return (\n    <Link\n      to={`${ROUTE_MARKETPLACE}/${contractAddress}`}\n      className='flex flex-col rounded-md shadow overflow-hidden transition-transform duration-300 transform hover:-translate-y-1'>\n      <div className='flex-shrink-0'>\n        <img\n          className='h-54 w-full object-scale-down'\n          src={thumbnail}\n          alt={name}\n        />\n      </div>\n      <div className='flex-1 bg-white dark:bg-gray-800 py-3 px-4 flex flex-col justify-between'>\n        <p className='text-base font-semibold text-gray-900 dark:text-gray-100 capitalize flex justify-between'>\n          <span>{name}</span>\n          {!!verified ? (\n            <BadgeCheckIcon className='w-6 h-6 text-blue-500 ml-2' />\n          ) : (\n            <ExclamationIcon className='w-6 h-6 text-yellow-500 ml-2' />\n          )}\n        </p>\n      </div>\n    </Link>\n  );\n};\n","import ReactLoading from \"react-loading\";\nimport { Collection } from \"../../typings/nft\";\nimport CollectionCard from \"../CollectionCard\";\nimport CardEmpty from \"../CardEmpty\";\n\nexport interface PureCollectionGridProps {\n  items: Collection[];\n  loading?: boolean;\n}\n\nexport function PureCollectionGrid({\n  items,\n  loading = false,\n}: PureCollectionGridProps) {\n  if (loading) {\n    return (\n      <ReactLoading\n        type='bubbles'\n        color='currentColor'\n        className='text-blue-600 dark:text-blue-500'\n      />\n    );\n  }\n\n  return (\n    <div className='grid gap-4 xl:gap-6 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5'>\n      {items.length === 0 ? (\n        <CardEmpty />\n      ) : (\n        items.map((item, key) => <CollectionCard key={key} collection={item} />)\n      )}\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { useAppDispatch, useAppSelector } from \"../../state/hooks\";\nimport { getCollections } from \"../../state/asyncActions/collections\";\nimport { PureCollectionGrid } from \"./CollectionGrid\";\nimport convertIpfsUrl from \"../../utils/convertIpfsUrl\";\nimport { Collection } from \"../../typings/nft\";\n\nexport interface CollectionGridProps {\n  status?: any;\n}\n\nconst CollectionGrid = ({ status }: CollectionGridProps) => {\n  const { chainId } = useWeb3React<Web3Provider>();\n  const dispatch = useAppDispatch();\n  const collections = useAppSelector((state) => state.collections.data);\n  const loading = useAppSelector((state) => state.collections.loading);\n  const [items, setItems] = useState<Array<Collection>>([]);\n\n  useEffect(() => {\n    dispatch(getCollections());\n  }, [chainId]);\n\n  useEffect(() => {\n    if (collections?.status) {\n      let temp = collections.data;\n\n      if (status) {\n        temp = temp.filter((item: any) => item.status === status);\n      }\n      temp = temp.map((item: any) => {\n        return { ...item, thumbnail: convertIpfsUrl(item.thumbnail) };\n      });\n\n      setItems(temp);\n    }\n  }, [collections]);\n\n  return <PureCollectionGrid items={items} loading={loading} />;\n};\n\nexport default CollectionGrid;\n","import {\n    getCollectionsStarted, getCollectionsSuccess, getCollectionsFailure\n} from \"../actions/collections\";\nimport { collectionsEndpoint } from '../../http';\n// import { COLLECTIONS_BY_NETWORK, Networks } from \"../../constants\";\n\n// get collection list\nexport const getCollections = () => async (dispatch: any) => {\n    dispatch(getCollectionsStarted());\n    try {\n        const res = await fetch(collectionsEndpoint);\n        const data = await res.json();\n        // const data = COLLECTIONS_BY_NETWORK[chainId || Networks.Avalanche];\n        dispatch(getCollectionsSuccess(data));\n\n    } catch (err: any) {\n        dispatch(getCollectionsFailure(err.message));\n    }\n}\n","import ContentWrapper from \"../../ContentWrapper\";\nimport CollectionGrid from \"../../components/CollectionGrid\";\n\nexport const PureCollectionsPage = () => {\n  return (\n    <ContentWrapper>\n      <div className='p-4 sm:p-8 max-w-8xl'>\n        <CollectionGrid />\n      </div>\n    </ContentWrapper>\n  );\n};\n","import { PureCollectionsPage } from \"./CollectionsPage\";\n\nconst CollectionsPage = () => {\n  return <PureCollectionsPage />;\n};\n\nexport default CollectionsPage;\n","import ContentWrapper from \"../../ContentWrapper\";\nimport AssetGrid from \"../../components/AssetGrid\";\n\nexport interface PureCollectionPageProps {\n  items: any;\n  loading?: boolean;\n}\n\nexport const PureCollectionPage = ({\n  items,\n  loading = false,\n}: PureCollectionPageProps) => {\n  return (\n    <ContentWrapper>\n      <div className='p-4 sm:p-8 max-w-8xl'>\n        <AssetGrid items={items} loading={loading} />\n      </div>\n    </ContentWrapper>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useAppDispatch, useAppSelector } from \"../../state/hooks\";\nimport { getCollection } from \"../../state/asyncActions/collection\";\nimport { NFT } from \"../../typings/nft\";\nimport { PureCollectionPage } from \"./CollectionPage\";\n\ninterface IParams {\n  contractAddress: string;\n}\n\nconst CollectionPage = () => {\n  const { contractAddress } = useParams<IParams>();\n  const [items, setItems] = useState<Array<NFT>>([]);\n\n  const dispatch = useAppDispatch();\n  const collection = useAppSelector((state) => state.collection.data);\n  const loading = useAppSelector((state) => state.collection.loading);\n\n  useEffect(() => {\n    dispatch(getCollection(contractAddress));\n  }, [contractAddress]);\n\n  useEffect(() => {\n    if (collection?.status) {\n      setItems(collection.data);\n    }\n  }, [collection]);\n\n  return <PureCollectionPage items={items} loading={loading} />;\n};\n\nexport default CollectionPage;\n","import { LocationButton } from \"./LocationButton\";\nexport default LocationButton;\n","import { useState } from \"react\";\nimport useGeolocation from \"@rooks/use-geolocation\";\nimport Button from \"../Button\";\n\nexport const LocationButton = () => {\n  const [when, setWhen] = useState(false);\n\n  const geoObj = useGeolocation({\n    when,\n  });\n\n  const onClick = () => {\n    setWhen(true);\n  };\n\n  return (\n    <>\n      {geoObj ? (\n        <span>\n          {/* JSON.stringify(geoObj) */}\n          {geoObj.lat}, {geoObj.lng}\n        </span>\n      ) : (\n        <Button onClick={onClick}>Get Location</Button>\n      )}\n    </>\n  );\n};\n","import LocationButton from \"../LocationButton\";\n\nexport interface PureCreateItemFormProps {\n  loading?: boolean;\n  onSubmitForm: (T: any) => void;\n  onUpdateInput: (T: any, X: any) => void;\n  onUploadFile: (T: any) => void;\n  file: any;\n  disabled?: boolean;\n}\n\nexport const PureCreateItemForm = ({\n  loading = false,\n  onSubmitForm,\n  onUpdateInput,\n  onUploadFile,\n  file,\n  disabled,\n}: PureCreateItemFormProps) => {\n  return (\n    <form onSubmit={(e) => onSubmitForm(e)}>\n      <div className='shadow sm:rounded-md sm:overflow-hidden'>\n        <div className='px-4 py-5 bg-white dark:bg-gray-800 space-y-6 sm:p-6'>\n          <div>\n            <label\n              htmlFor='asset-name'\n              className='block text-sm font-medium text-gray-700 dark:text-gray-400'>\n              Name\n            </label>\n            <input\n              type='text'\n              name='asset-name'\n              id='asset-name'\n              className='mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600'\n              onChange={(e) => onUpdateInput(\"name\", e.target.value)}\n            />\n          </div>\n\n          <div>\n            <label\n              htmlFor='description'\n              className='block text-sm font-medium text-gray-700 dark:text-gray-400'>\n              Description\n            </label>\n            <div className='mt-1'>\n              <textarea\n                id='description'\n                name='description'\n                rows={3}\n                className='shadow-sm focus:ring-blue-500 focus:border-blue-500 mt-1 block w-full sm:text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600'\n                onChange={(e) => onUpdateInput(\"description\", e.target.value)}\n              />\n            </div>\n            <p className='mt-2 text-sm text-gray-500 dark:text-gray-400'>\n              Brief description of the asset.\n            </p>\n          </div>\n\n          <div>\n            <label\n              htmlFor='asset-geolocation'\n              className='block text-sm font-medium text-gray-700 dark:text-gray-400'>\n              Coordinates\n            </label>\n            <div className='mt-1'>\n              <LocationButton />\n            </div>\n            {/* <input\n              type='text'\n              name='asset-geolocation'\n              id='asset-geolocation'\n              className='mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600'\n              onChange={(e) => onUpdateInput(\"name\", e.target.value)}\n            /> */}\n          </div>\n\n          <div>\n            <label className='block text-sm font-medium text-gray-700 dark:text-gray-400'>\n              Image\n            </label>\n            <div className='flex mt-4'>\n              {file ? (\n                <div className='rounded mr-2 w-80 overflow-hidden'>\n                  <img src={file} alt='' />\n                </div>\n              ) : (\n                <div className='rounded mr-2 w-80 flex justify-center items-center p-6 border-2 border-gray-300 dark:border-gray-600 border-dashed'>\n                  <span className='text-gray-400'>Preview</span>\n                </div>\n              )}\n              <div className='flex flex-1 justify-center items-center p-6 border-2 border-gray-300 dark:border-gray-600 border-dashed rounded'>\n                <div className='space-y-1 text-center'>\n                  <svg\n                    className='mx-auto h-12 w-12 text-gray-400'\n                    stroke='currentColor'\n                    fill='none'\n                    viewBox='0 0 48 48'\n                    aria-hidden='true'>\n                    <path\n                      d='M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02'\n                      strokeWidth={2}\n                      strokeLinecap='round'\n                      strokeLinejoin='round'\n                    />\n                  </svg>\n                  <div className='flex text-sm justify-center'>\n                    <label\n                      htmlFor='file-upload'\n                      className='relative cursor-pointer rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500'>\n                      <span>Upload a file</span>\n                      <input\n                        id='file-upload'\n                        name='file-upload'\n                        type='file'\n                        className='sr-only'\n                        onChange={onUploadFile}\n                      />\n                    </label>\n                    {/* <p className='pl-1'>or drag and drop</p> */}\n                  </div>\n                  {/* TODO: update accepted filetypes */}\n                  <p className='text-xs text-gray-500 dark:text-gray-400'>\n                    PNG, JPG, GIF up to 10MB\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* onChange={(e) => onUpdateInput(\"attributes\", e.target.value)} */}\n          {/* <div>\n            <p className='block text-sm font-medium text-gray-700 dark:text-gray-400'>\n              Attributes\n            </p>\n\n            <div className='mt-6 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6'>\n              <div className='sm:col-span-3'>\n                <label\n                  htmlFor='attribute-type'\n                  className='block text-sm font-medium text-gray-700 dark:text-gray-400'>\n                  Type\n                </label>\n                <div className='mt-1'>\n                  <input\n                    type='text'\n                    name='attribute-type'\n                    id='attribute-type'\n                    className='shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md'\n                  />\n                </div>\n              </div>\n\n              <div className='sm:col-span-3'>\n                <label\n                  htmlFor='attribute-value'\n                  className='block text-sm font-medium text-gray-700 dark:text-gray-400'>\n                  Value\n                </label>\n                <div className='mt-1'>\n                  <input\n                    type='text'\n                    name='attribute-value'\n                    id='attribute-value'\n                    className='shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md'\n                  />\n                </div>\n              </div>\n            </div>\n          </div> */}\n        </div>\n\n        <div className='px-4 py-3 bg-gray-50 dark:bg-gray-700 flex justify-between items-center sm:px-6'>\n          <div className='text-gray-600 dark:text-gray-400'>Coming Soon</div>\n          <button\n            type='submit'\n            disabled={disabled}\n            className='btn btn--primary'>\n            Create Digital Asset\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { create as ipfsHttpClient } from \"ipfs-http-client\";\nimport { ROUTE_ACCOUNT } from \"../../constants/routes\";\nimport { PureCreateItemForm } from \"./CreateItemForm\";\n\n// interface IParams {\n//   contractAddress: string;\n// }\n\nconst client = ipfsHttpClient({\n  apiPath: \"https://ipfs.infura.io:5001/api/v0\",\n});\n\nconst CreateItemForm = () => {\n  const history = useHistory();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [disabled, setDisabled] = useState<boolean>(true);\n  // const { contractAddress } = useParams<IParams>();\n\n  const [name, setName] = useState<string>(\"\");\n  const [description, setDescription] = useState<string>(\"\");\n  const [file, setFile] = useState<any>(null);\n  const [fileUrl, setFileUrl] = useState<string>(\"\");\n\n  useEffect(() => {\n    // TODO: add geolocation\n    if (name && description && file) {\n      setDisabled(false);\n    } else {\n      setDisabled(true);\n    }\n  }, [name, description, file]);\n\n  const onUpdateInput = (key: string, val: string) => {\n    if (key === \"name\") {\n      setName(val);\n    }\n    if (key === \"description\") {\n      setDescription(val);\n    }\n  };\n\n  const onSubmitForm = (event: any) => {\n    event.preventDefault();\n    setLoading(true);\n    // onCreateItem();\n    onCreateItemAlert();\n    setLoading(false);\n  };\n\n  // TODO: remove once Create is implemented\n  const onCreateItemAlert = () => {\n    alert(\"Unable to create items at this time. Coming soon\");\n  };\n\n  // eslint-disable-next-line\n  const onCreateItem = async () => {\n    if (!name || !description || !file) return;\n\n    try {\n      const added = await client.add(file, {\n        progress: (prog: any) => console.log(`received: ${prog}`),\n      });\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      setFileUrl(url);\n    } catch (error) {\n      console.log(\"Upload file error:\", error);\n    }\n\n    if (!fileUrl) return;\n\n    // const data = JSON.stringify({\n    //   name,\n    //   description,\n    //   image: fileUrl,\n    // });\n\n    try {\n      // const added = await client.add(data);\n      // const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      // createSale(url);\n      history.push(ROUTE_ACCOUNT);\n    } catch (error) {\n      console.log(\"Create item error:\", error);\n    }\n  };\n\n  const onUploadFile = async (e: any) => {\n    setFile(URL.createObjectURL(e.target.files[0]));\n  };\n\n  return (\n    <PureCreateItemForm\n      loading={loading}\n      onSubmitForm={onSubmitForm}\n      onUpdateInput={onUpdateInput}\n      onUploadFile={onUploadFile}\n      file={file}\n      disabled={disabled}\n    />\n  );\n};\n\nexport default CreateItemForm;\n","import { Fragment } from \"react\";\nimport ReactLoading from \"react-loading\";\nimport { Tab } from \"@headlessui/react\";\nimport ContentWrapper from \"../../ContentWrapper\";\nimport CreateItemForm from \"../../components/CreateItemForm\";\n\nexport interface PureCreatorPageProps {\n  loading?: boolean;\n}\n\nexport const PureCreatorPage = ({\n  loading = false,\n}: PureCreatorPageProps) => {\n  const tabs = [\"My Creations\", \"Create Asset\", \"Add Collection\"];\n\n  if (loading) {\n    return (\n      <ReactLoading\n        type='bubbles'\n        color='currentColor'\n        className='text-blue-600 dark:text-blue-500'\n      />\n    );\n  }\n\n  return (\n    <ContentWrapper>\n      <Tab.Group>\n        <Tab.List className='border-b border-gray-300 dark:border-gray-800'>\n          {tabs.map((tab, idx) => (\n            <Tab as={Fragment} key={idx}>\n              {({ selected }) => (\n                <button\n                  className={[\n                    \"w-1/3 py-4 px-1 text-center border-b-2 font-medium text-sm\",\n                    selected\n                      ? \"border-blue-500 text-blue-600\"\n                      : \"border-transparent text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-800\",\n                  ].join(\" \")}>\n                  {tab}\n                </button>\n              )}\n            </Tab>\n          ))}\n        </Tab.List>\n        <Tab.Panels className='p-4 sm:p-8 max-w-8xl'>\n          <Tab.Panel>\n            <h2>No items have been created.</h2>\n          </Tab.Panel>\n\n          <Tab.Panel>\n            <div className='md:grid md:grid-cols-3 md:gap-6'>\n              <div className='md:col-span-1'>\n                <div className='px-4 sm:px-0'>\n                  <h3 className='text-lg font-medium leading-6 text-gray-900 dark:text-white'>\n                    Create Asset\n                  </h3>\n                  <p className='mt-1 text-sm text-gray-600 dark:text-gray-400'>\n                    Coming in Q4. Create your own NFTs tied to a geographical\n                    location and list them for sale in the Marketplace. Using\n                    the Explore tab, users will be able to see all gNFTs in\n                    their area and purchase them from the Marketplace.\n                    {/* Submitting this form will upload your image to ipfs and create a new item in your wallet. */}\n                  </p>\n                </div>\n              </div>\n              <div className='mt-5 md:mt-0 md:col-span-2'>\n                <CreateItemForm />\n              </div>\n            </div>\n          </Tab.Panel>\n\n          <Tab.Panel>\n            <h2>\n              In the future, you'll be able to submit your own Collection to the\n              marketplace.\n            </h2>\n          </Tab.Panel>\n        </Tab.Panels>\n      </Tab.Group>\n    </ContentWrapper>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { PureCreatorPage } from \"./CreatorPage\";\n\nconst CreatorPage = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    setLoading(false);\n  }, []);\n\n  return <PureCreatorPage loading={loading} />;\n};\n\nexport default CreatorPage;\n","import { useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport L from \"leaflet\";\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Popup,\n  useMap,\n  // Circle,\n  FeatureGroup,\n} from \"react-leaflet\";\nimport { NFT } from \"../../typings/nft\";\nimport { ROUTE_MARKETPLACE } from \"../../constants/routes\";\n\n// const getTraitValue = (attributes: Array<Attribute>, trait: string) => {\n//   return attributes?.find((attr) => attr.trait_type === trait)?.value;\n// };\n\nfunction LocationMarker({ selected }: { selected: any }) {\n  // const [position, setPosition] = useState<any>(null);\n  const map = useMap();\n  // var icon = L.icon({\n  //   iconUrl: selected.image,\n  //   iconSize: [60, 60],\n  //   iconAnchor: [0, 0],\n  //   popupAnchor: [30, -8],\n  //   shadowUrl: undefined,\n  // });\n\n  useEffect(() => {\n    // const lat = getTraitValue(selected.attributes, \"Latitude\");\n    // const lng = getTraitValue(selected.attributes, \"Longitude\");\n    const latlng = new L.LatLng(Number(selected.lat), Number(selected.lng));\n    // setPosition(latlng);\n    map.flyTo(latlng, 3);\n  }, [selected]);\n\n  return null;\n  // return position === null ? null : (\n  //   <Marker position={position} icon={icon}>\n  //     <Popup>\n  //       <div className='font-semibold text-base'>{selected.name}</div>\n  //       <div>\n  //         <NavLink\n  //           to={`${ROUTE_MARKETPLACE}/${selected.contractAddress}/${selected.tokenId}`}>\n  //           View NFT\n  //         </NavLink>\n  //       </div>\n  //     </Popup>\n  //   </Marker>\n  // );\n}\n\nfunction ItemMarker({ item }: { item: any }) {\n  // const lat = getTraitValue(item.attributes, \"Latitude\");\n  // const lng = getTraitValue(item.attributes, \"Longitude\");\n  const center = new L.LatLng(Number(item.lat), Number(item.lng));\n  // const radiusInner = 5000;\n  // const radiusOuter = 25000;\n  var icon = L.icon({\n    iconUrl: item.image,\n    iconSize: [48, 48],\n    iconAnchor: [0, 0],\n    popupAnchor: [30, -8],\n    shadowUrl: undefined,\n  });\n\n  return (\n    <FeatureGroup pathOptions={{ color: \"purple\" }}>\n      {center && (\n        <Marker position={center} icon={icon}>\n          <Popup>\n            <div className='font-semibold text-base'>{item.name}</div>\n            <div>\n              {item.description}\n            </div>\n            <div>\n              <NavLink\n                to={`${ROUTE_MARKETPLACE}/${item.contractAddress}/${item.tokenId}`}>\n                View NFT\n              </NavLink>\n            </div>\n          </Popup>\n        </Marker>\n      )}\n      {/* <Circle\n        center={center}\n        pathOptions={{ color: \"blue\", fillColor: \"blue\" }}\n        radius={radiusOuter}\n      /> */}\n      {/* <Circle\n        center={center}\n        pathOptions={{ color: \"red\", fillColor: \"red\" }}\n        radius={radiusInner}\n        stroke={false}\n      /> */}\n    </FeatureGroup>\n  );\n}\n\nexport interface LeafletMapProps {\n  collectibles: Array<NFT>;\n  selected: NFT;\n  className?: string;\n}\n\nexport const LeafletMap = ({\n  collectibles,\n  selected,\n  className,\n}: LeafletMapProps) => {\n  // const tileLayerUrl = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n  // const tileLayerUrl = \"http://c.tile.stamen.com/watercolor/{z}/{x}/{y}.jpg\";\n  const tileLayerUrl =\n    \"https://tiles.wmflabs.org/osm-no-labels/{z}/{x}/{y}.png\";\n\n  return (\n    <MapContainer\n      className={className}\n      center={[54.525963, 15.255119]}\n      zoom={3}\n      scrollWheelZoom={true}>\n      <TileLayer url={tileLayerUrl} />\n      {selected && <LocationMarker selected={selected} />}\n      {collectibles?.map((item) => (\n        <ItemMarker item={item} key={item.tokenId} />\n      ))}\n    </MapContainer>\n  );\n};\n","import { LeafletMap } from \"./LeafletMap\";\nexport default LeafletMap;\n","export default function classNames(...classes: any) {\n    return classes.filter(Boolean).join(\" \");\n}","import { useState } from \"react\";\nimport ReactLoading from \"react-loading\";\nimport LeafletMap from \"../../components/LeafletMap\";\nimport { NFT } from \"../../typings/nft\";\nimport classNames from \"../../utils/classNames\";\nimport ContentWrapper from \"../../ContentWrapper\";\n\nexport interface PureExplorePageProps {\n  items: Array<any>;\n  loading?: boolean;\n}\n\nexport const PureExplorePage = ({ items, loading }: PureExplorePageProps) => {\n  const [selected, setSelected] = useState<NFT>();\n\n  return (\n    <ContentWrapper>\n      <div className='flex h-full'>\n        <section\n          aria-labelledby='primary-heading'\n          className='min-w-0 flex-1 h-full flex flex-col overflow-hidden lg:order-last'>\n          <h1 id='primary-heading' className='sr-only'>\n            Map\n          </h1>\n          <LeafletMap\n            className='h-full w-full object-cover z-10'\n            collectibles={items}\n            // @ts-ignore\n            selected={selected}\n          />\n        </section>\n\n        <aside className='h-full overflow-hidden hidden lg:block lg:flex-shrink-0 lg:order-first'>\n          <nav\n            aria-label='Sections'\n            className='w-96 h-full bg-white dark:bg-gray-900 border-r border-gray-200 relative hidden lg:block'>\n            {loading ? (\n              <ReactLoading\n                type='bubbles'\n                color='currentColor'\n                className='text-blue-600 dark:text-blue-500'\n              />\n            ) : items.length ? (\n              items.map((item) => (\n                <div\n                  key={item.id}\n                  onClick={() => setSelected(item)}\n                  tabIndex={0}\n                  className={classNames(\n                    item === selected\n                      ? \"bg-gray-100 dark:bg-gray-800\"\n                      : \"hover:bg-gray-100 dark:hover:bg-gray-800\",\n                    \"cursor-pointer flex p-4 border-b border-gray-200 dark:border-gray-800 items-center\"\n                  )}>\n                  <img\n                    className='flex-shrink-0 -mt-0.5 h-14 w-14'\n                    src={item.image}\n                    alt={item.name}\n                  />\n                  <div className='ml-3 text-sm overflow-hidden'>\n                    <p className='text-base font-semibold text-gray-900 dark:text-gray-100 truncate'>\n                      {item.name}\n                    </p>\n                    <p className='mt-1 text-sm text-gray-600 dark:text-gray-300 truncate'>\n                      {item.description}\n                    </p>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className='flex p-4 border-b border-gray-200 dark:border-gray-800 items-center'>\n                <div className='ml-3 text-sm overflow-hidden'>\n                  <p className='text-base font-semibold text-gray-900 dark:text-gray-100 truncate'>\n                    Empty\n                  </p>\n                  <p className='mt-1 text-sm text-gray-600 dark:text-gray-300 truncate'>\n                    No items to display.\n                  </p>\n                </div>\n              </div>\n            )}\n          </nav>\n        </aside>\n      </div>\n    </ContentWrapper>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getCollection } from \"../../state/asyncActions/collection\";\nimport { useAppDispatch, useAppSelector } from \"../../state/hooks\";\nimport ContractAddresses from \"../../contracts/contract-address.json\";\nimport { NFT } from \"../../typings/nft\";\n\nimport { PureExplorePage } from \"./ExplorePage\";\nimport convertIpfsUrl from \"../../utils/convertIpfsUrl\";\n\nconst ExplorePage = () => {\n  const dispatch = useAppDispatch();\n  const collection = useAppSelector((state) => state.collection.data);\n  const loading = useAppSelector((state) => state.collection.loading);\n  const [items, setItems] = useState<NFT[]>([]);\n\n  useEffect(() => {\n    // TODO: update. 1st Collection used for MVP\n    dispatch(getCollection(ContractAddresses.Continents));\n  }, []);\n\n  useEffect(() => {\n    if (collection?.status) {\n      const temp = collection.data.map((item: any) => {\n        return { ...item, thumbnail: convertIpfsUrl(item.image) };\n      });\n\n      setItems(temp);\n    }\n  }, [collection]);\n\n  return <PureExplorePage items={items} loading={loading} />;\n};\nexport default ExplorePage;\n","import { FAQ } from \"../typings/faq\";\n\nexport const faqs: Array<FAQ> = [\n  {\n    id: 1,\n    question: \"What is an NFT?\",\n    answer:\n      \"A non-fungible token (NFT) is a special type of cryptographic token which represents something unique; non-fungible tokens are thus not mutually interchangeable. This is in contrast to cryptocurrencies like bitcoin, and many network or utility tokens that are fungible in nature.\",\n  },\n  {\n    id: 2,\n    question: \"What is a gNFT?\",\n    answer:\n      \"A georeferenced non-fungible token (gNFT) is a specialized NFT which references a real world location; georeferenced non-fungible tokens are thus not mutually interchangeable and are tied to the geographic location in which they are purchased and this location is tracked in the transaction. gNFTs can be referred to as digital souvenirs.\",\n  },\n  {\n    id: 3,\n    question: \"How does the Hodo Network work?\",\n    answer:\n      \"The Hodo Network is a platform where you can buy and sell gNFTs. It is the first of it’s kind and utilizes the Avalanche network to track and manage the digital assets.\",\n  },\n  {\n    id: 4,\n    question: \"How can I buy a Hodo Network gNFT?\",\n    answer:\n      \"First you need to create a MetaMask wallet, if you don’t already have one, and connect it to the Avalanche network (<a href='https://www.youtube.com/watch?v=uHrBWHNl2Nc'>https://www.youtube.com/watch?v=uHrBWHNl2Nc</a>). Once you have the MetaMask wallet configured you can tranfer AVAX from your AVAX web wallet to your MetaMask address on the C-Chain. You then need to link your MetaMask wallet to the Hodo Network via the connect button at Hodo Network. Once your MetaMask wallet is linked and funded with AVAX you can purchase gNFTs on the Hodo Network. If you need any help acquiring the AVAX token to purchase our gNFTs please reach out to our admin!\",\n  },\n  {\n    id: 5,\n    question: \"Is AVAX the only token I can use to purchase a gNFT?\",\n    answer: \"Yes. This is the only supported token on the Hodo Network.\",\n  },\n  {\n    id: 6,\n    question:\n      \"Can I buy a gNFT if I am not in the physical location the gNFT was minted for?\",\n    answer:\n      \"There is the ability of purchase gNFTs that have been minted specifically for a location other than the location you are currently in. If the user that is selling the gNFT allows a foreign buyer then you may purchase the gNFT. You should understand that a gNFT that is purchased from outside the area it was minted for will be devalued versus a gNFT that maintains the integrity of being purchased within the originally intended area (a pure gNFT). \",\n  },\n  {\n    id: 7,\n    question: \"What are the different classifications of a gNFT?\",\n    answer: \"There are 3 classifications for gNFTs: Epic, Rare and Common.\",\n  },\n  {\n    id: 8,\n    question: \"What is a ‘pure’ gNFT?\",\n    answer:\n      \"A pure gNFT is a gNFT that has always been purchased by users that were, at the time of purchase, located in the geographical location that the gNFT was minted for. This is the most valuable gNFT. It proves that the owner has always been in the correct geographical location when purchasing.\",\n  },\n  {\n    id: 9,\n    question: \"How long is each series available for?\",\n    answer:\n      \"Each series will be available directly from the Hodo Network for 12-36 months. After this time the tokens that have not been sold will be burnt, effectively limiting the supply of tokens. Each series will have a unique burn date.\",\n  },\n  {\n    id: 10,\n    question: \"How often are new series released?\",\n    answer:\n      \"We are on target to release a new series every 2-4 months, each series will have a different specific geographical specification. Keep an eye on our social media feeds for release information on future series!\",\n  },\n  {\n    id: 11,\n    question: \"How many of each type are minted?\",\n    answer: \"Quantities are different for each classification and series. \",\n  },\n  {\n    id: 12,\n    question: \"Can I transfer my gNFT to another platform?\",\n    answer:\n      \"Yes, Hodo gNFTs will be able to be transferred but know that if you sell the gNFT on another platform and it is not properly georeferenced it’s value will be reduced. We recommend selling all your gNFTs on the Hodo Network to maintain the integrity of the gNFT.\",\n  },\n  {\n    id: 13,\n    question: \"What features do you have planned for the future?\",\n    answer: \"Please visit the <a href='/roadmap'>roadmap</a>!\",\n  },\n  {\n    id: 14,\n    question: \"Which blockchain does the marketplace use?\",\n    answer:\n      \"The marketplace was built using the Avalanche blockchain. Assets are minted on the C-Chain.\",\n  },\n  {\n    id: 15,\n    question:\n      \"Why were the assets minted on the C-Chain instead of the X-Chain?\",\n    answer:\n      \"The C-Chain is EVM compatible which will allow interoperability with other EVM chains in the future. Using the C-Chain also allows us to enable wallets like MetaMask for a better user experience.\",\n  },\n  {\n    id: 16,\n    question: \"What token standard do the NFTs use?\",\n    answer:\n      \"The NFTs were minted using the ERC1155 token standard. This allows for multiple tokens to be represented by a single smart contract and unlocks some cost saving features like sending multiple tokens in a single transaction.\",\n  },\n];\n","import { FaqList } from \"./FaqList\";\nexport default FaqList;\n","import React from \"react\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport { FAQ } from \"../../typings/faq\";\n\nexport interface FaqListProps {\n  items: Array<FAQ>;\n}\n\nexport const FaqList: React.FC<FaqListProps> = ({ items }) => {\n  return (\n    <dl className='space-y-8 divide-y divide-gray-200 dark:divide-gray-800'>\n      {items.map((item) => (\n        <div key={item.id} className='pt-6 md:grid md:grid-cols-12 md:gap-8'>\n          <dt className='text-base font-medium text-gray-800 dark:text-gray-100 md:col-span-5'>\n            {item.question}\n          </dt>\n          <dd className='mt-2 md:mt-0 md:col-span-7 prose-blue'>\n            <p className='text-base text-gray-700 dark:text-gray-200'>\n              {ReactHtmlParser(item.answer)}\n            </p>\n          </dd>\n        </div>\n      ))}\n    </dl>\n  );\n};\n","import { FaqPage } from \"./FaqPage\";\nexport default FaqPage;\n","import { faqs } from \"../../data/faqs\";\nimport ContentWrapper from \"../../ContentWrapper\";\nimport FaqList from \"../../components/FaqList\";\n\nexport const FaqPage = () => {\n  return (\n    <ContentWrapper>\n      <section\n        aria-labelledby='primary-heading'\n        className='p-4 sm:p-8 max-w-8xl divide-y-2 divide-gray-200 dark:divide-gray-800'>\n        <h1 id='primary-heading' className='text-2xl font-bold'>\n          Frequently Asked Questions\n        </h1>\n\n        <div className='mt-6'>\n          <FaqList items={faqs} />\n        </div>\n      </section>\n    </ContentWrapper>\n  );\n};\n","import Button from \"../Button\";\n\nexport interface PureHeroProps {\n  onClick?: () => void;\n}\n\nexport const PureHero = ({ onClick }: PureHeroProps) => {\n  return (\n    <div className=\"max-w-6xl mx-auto py-12 md:py-24 px-4 sm:px-6 lg:px-8 text-center\">\n      <h2 className='tracking-tight font-extrabold text-gray-900 dark:text-white text-4xl sm:text-5xl lg:text-6xl'>\n        <span>Hodo </span>\n        <span className='text-blue-600 dark:text-white'>Network</span>\n      </h2>\n\n      <p className='mt-4 text-gray-600 dark:text-gray-400 text-lg sm:text-xl'>\n        Welcome to the first marketplace for Georeferenced Non-Fungible Tokens (gNFTs).\n      </p>\n\n      <div className='mt-6'>\n        <Button primary={true} size='large' onClick={onClick}>\n          Start Browsing\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import { useHistory } from \"react-router-dom\";\nimport { ROUTE_MARKETPLACE } from \"../../constants/routes\";\nimport { PureHero } from \"./Hero\";\n\nconst Hero = () => {\n  const history = useHistory();\n  const onClick = () => {\n    history.push(ROUTE_MARKETPLACE);\n  };\n\n  return <PureHero onClick={onClick} />;\n};\n\nexport default Hero;\n","import { HomePage } from \"./HomePage\";\nexport default HomePage;\n","import ContentWrapper from \"../../ContentWrapper\";\nimport Hero from \"../../components/Hero\";\nimport CollectionGrid from '../../components/CollectionGrid';\n\nexport const HomePage = () => {\n  return (\n    <ContentWrapper>\n      <section\n        aria-labelledby='primary-heading'\n        className='px-4 sm:px-8 max-w-8xl'>\n        <h1 id='primary-heading' className='sr-only'>\n          Home\n        </h1>\n\n        <Hero />\n\n        <h2 className='text-2xl font-semibold tracking-tight mb-4'>Upcoming Collections</h2>\n        <CollectionGrid status={\"upcoming\"} />\n      </section>\n    </ContentWrapper>\n  );\n};\n","// import { useState, useEffect } from \"react\";\n// import {\n//   useAppDispatch,\n//   useAppSelector\n// } from \"../../state/hooks\";\n// import { getCollectionList } from \"../../state/asyncActions/collections\";\n// import { Collection, NFT } from \"../../typings/nft\";\nimport { PureAssetListItem } from \"./AssetListItem\";\n\n// export interface AssetListItemProps {\n//   nft: NFT;\n// }\n\n// const AssetListItem = ({ nft }: AssetListItemProps) => {\n//   // const dispatch = useAppDispatch();\n//   const collections = useAppSelector((state) => state.collections.data);\n//   const [collection, setCollection] = useState<Collection>();\n\n//   useEffect(() => {\n//     // dispatch(getCollections());\n\n//     const data = collections?.data.find(\n//       (collection: any) => collection.contractAddress === nft.contractAddress\n//     );\n\n//     setCollection(data);\n//   }, []);\n\n//   return <PureAssetListItem nft={nft} />;\n// };\n\nexport default PureAssetListItem;\n","import React from \"react\";\nimport { NavLink, useLocation } from \"react-router-dom\";\nimport { BadgeCheckIcon, ExclamationIcon } from \"@heroicons/react/solid\";\n// import { Web3Provider } from \"@ethersproject/providers\";\n// import { useWeb3React } from \"@web3-react/core\";\nimport { Avax } from \"../../assets\";\n// import { NATIVE_CURRENCY } from \"../../constants\";\nimport { ROUTE_MARKETPLACE } from \"../../constants/routes\";\nimport { NFT } from \"../../typings/nft\";\n\nexport interface PureAssetListItemProps {\n  item: NFT;\n}\n\nexport const PureAssetListItem: React.FC<PureAssetListItemProps> = ({\n  item: { tokenId, contractAddress, name, image, description, sold, price, contractName, contractVerified }\n}) => {\n  // const { chainId } = useWeb3React<Web3Provider>();\n  const location = useLocation();\n  const path = `${ROUTE_MARKETPLACE}/${contractAddress}/${tokenId}`;\n\n  return (\n    <NavLink\n      to={path}\n      exact={true}\n      className='cursor-pointer flex p-4 border-b border-gray-200 dark:border-gray-800 items-center hover:bg-gray-50 dark:hover:bg-gray-800'\n      activeClassName='bg-gray-100 dark:bg-gray-800'\n      aria-current={[path].includes(location.pathname) ? \"page\" : undefined}\n    >\n      <div className='flex-shrink-0'>\n        <img\n          className='flex-shrink-0 h-24 w-24 md:h-32 md:w-32'\n          src={image}\n          alt={name}\n        />\n      </div>\n      <div className='flex-1 px-4 flex justify-between'>\n        <div className='flex-1 max-w-2xl'>\n          <p className='text-xs text-gray-600 dark:text-gray-400 flex items-center'>\n            {contractName}\n            {!!contractVerified ? (\n              <BadgeCheckIcon className='w-4 h-4 text-blue-500 ml-1' />\n            ) : (\n              <ExclamationIcon className='w-4 h-4 text-yellow-500 ml-1' />\n            )}\n          </p>\n          <p className='mt-1 text-base font-semibold text-gray-900 dark:text-gray-100'>\n            {name}\n          </p>\n          <p className='mt-1 text-sm text-gray-600 dark:text-gray-300 line-clamp-3'>\n            {description}\n          </p>\n        </div>\n      </div>\n      {!sold && (\n        <div className='flex flex-col items-end'>\n          <p className='text-xs text-gray-600 dark:text-gray-400'>Price</p>\n          <div className='mt-1 flex items-center'>\n            {/* TODO: allow other currency logos */}\n            {/* {(chainId && NATIVE_CURRENCY[chainId]) || NATIVE_CURRENCY[0]} */}\n            <img src={Avax} alt='AVAX logo' className='w-3 h-3 mr-2' />\n            <span className='text-sm font-medium'>{price}</span>\n          </div>\n        </div>\n      )}\n    </NavLink>\n  );\n};\n","import { PureAssetList } from \"./AssetList\";\nexport default PureAssetList;\n","import ReactLoading from 'react-loading';\nimport { NFT } from \"../../typings/nft\";\nimport AssetListItem from '../AssetListItem';\n\nexport interface PureAssetListProps {\n  items: Array<NFT>;\n  loading?: boolean;\n}\n\nexport const PureAssetList = ({ items, loading = false }: PureAssetListProps) => {\n  if (loading) {\n    return (\n      <ReactLoading\n        type='bubbles'\n        color='currentColor'\n        className='text-blue-600 dark:text-blue-500'\n      />\n    );\n  }\n\n  return (\n    <nav\n      aria-label='Sections'\n      className='bg-white dark:bg-gray-900'>\n\n      {items.map((item: NFT) => (\n        <AssetListItem item={item} key={item.tokenId} />\n      ))}\n    </nav>\n  );\n};\n","import { useState } from 'react';\nimport { Switch, RadioGroup } from \"@headlessui/react\";\nimport { ViewGridIcon, ViewListIcon } from '@heroicons/react/outline';\nimport { NFT } from \"../../typings/nft\";\nimport classNames from '../../utils/classNames';\nimport ContentWrapper from \"../../ContentWrapper\";\nimport AssetGrid from \"../../components/AssetGrid\";\nimport AssetList from '../../components/AssetList';\n\nconst displayOptions = [\n  { name: 'Grid', icon: ViewGridIcon, disabled: false },\n  { name: 'List', icon: ViewListIcon, disabled: false },\n];\n\nexport interface PureMarketplacePageProps {\n  items: Array<NFT>;\n  loading?: boolean;\n  verifiedOnly?: boolean;\n  onFilterVerified: (checked: boolean) => void;\n}\n\nexport const PureMarketplacePage = ({\n  items,\n  loading = false,\n  verifiedOnly = false,\n  onFilterVerified,\n}: PureMarketplacePageProps) => {\n  const [mem, setMem] = useState(displayOptions[0]);\n\n  return (\n    <ContentWrapper>\n      <div className='p-4 sm:p-8 max-w-8xl'>\n        <div className='mb-4 flex justify-between items-center'>\n          <p className=\"text-xl\">\n            {items.length} results\n          </p>\n\n          <div className=\"flex items-center justify-items-end gap-4\">\n            <RadioGroup value={mem} onChange={setMem}>\n              <RadioGroup.Label className=\"sr-only\">Choose a display option</RadioGroup.Label>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {displayOptions.map((option) => (\n                  <RadioGroup.Option\n                    key={option.name}\n                    value={option}\n                    disabled={option.disabled}\n                    className={({ active, checked }) =>\n                      classNames(\n                        option.disabled ? 'opacity-25 cursor-not-allowed' : 'cursor-pointer focus:outline-none',\n                        active ? 'ring-2 ring-offset-2 ring-blue-500' : '',\n                        checked\n                          ? 'bg-blue-600 border-transparent text-white hover:bg-blue-700'\n                          : 'bg-white border-gray-200 text-gray-900 hover:bg-gray-50',\n                        'cursor-pointer focus:outline-none border rounded-md py-2 px-2 flex items-center justify-center text-sm font-medium uppercase sm:flex-1'\n                      )\n                    }\n                  >\n                    <RadioGroup.Label as={option.icon} className='w-4 h-4' />\n                  </RadioGroup.Option>\n                ))}\n              </div>\n            </RadioGroup>\n\n            <Switch.Group as=\"div\" className=\"flex items-center\">\n              <Switch\n                checked={verifiedOnly}\n                onChange={onFilterVerified}\n                className={classNames(\n                  verifiedOnly ? 'bg-blue-600' : 'bg-gray-300',\n                  'relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'\n                )}\n              >\n                <span\n                  aria-hidden=\"true\"\n                  className={classNames(\n                    verifiedOnly ? 'translate-x-5' : 'translate-x-0',\n                    'pointer-events-none inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200'\n                  )}\n                />\n              </Switch>\n              <Switch.Label as=\"span\" className=\"ml-2\">\n                <span className=\"text-sm font-medium\">Verified</span>\n              </Switch.Label>\n            </Switch.Group>\n          </div>\n        </div>\n\n        {mem.name === \"Grid\" ? (\n          <AssetGrid items={items} loading={loading} />\n        ) : (\n          <AssetList items={items} loading={loading} />\n        )}\n      </div>\n    </ContentWrapper>\n  );\n};\n","import {\n    GET_ASSETS_STARTED, GET_ASSETS_SUCCESS, GET_ASSETS_FAILURE\n} from \"./actionTypes\";\n\n// to get the list of assets - started\nexport const getAssetsStarted = () => {\n    return {\n        type: GET_ASSETS_STARTED\n    }\n}\n\n// to get the list of assets - success\nexport const getAssetsSuccess = (data: any) => {\n    return {\n        type: GET_ASSETS_SUCCESS,\n        payload: {\n            data\n        }\n    }\n}\n\n// to get the list of assets - failure\nexport const getAssetsFailure = (error: any) => {\n    return {\n        type: GET_ASSETS_FAILURE,\n        payload: {\n            error\n        }\n    }\n}","import { RoadmapSection } from \"../typings/roadmap\";\n\nexport const roadmap: Array<RoadmapSection> = [\n  {\n    heading: \"Q2\",\n    tasks: [\n      {\n        name: \"Ideation\",\n        description: \"Business planning and creation of initial roadmap.\",\n        status: \"complete\",\n      },\n      {\n        name: \"NFT Design\",\n        description: \"Design of the first NFT series.\",\n        status: \"complete\",\n      },\n      {\n        name: \"Marketplace Development\",\n        description: \"Development of the Marketplace UI.\",\n        status: \"complete\",\n      },\n    ],\n  },\n  {\n    heading: \"Q3\",\n    tasks: [\n      {\n        name: \"Smart Contract Development\",\n        description:\n          \"Development of Smart Contracts for the Marketplace and NFTs.\",\n        status: \"complete\",\n      },\n      {\n        name: \"Smart Contract Integration\",\n        description: \"Update the UI to interact with the Smart Contracts.\",\n        status: \"current\",\n      },\n    ],\n  },\n  {\n    heading: \"Q4\",\n    tasks: [\n      {\n        name: \"NFT Minting\",\n        description: \"Minting of the first series of NFTs.\",\n        status: \"upcoming\",\n      },\n      {\n        name: \"Platform Launch\",\n        description: \"Launch of Hodo Network Marketplace.\",\n        status: \"upcoming\",\n      },\n      {\n        name: \"Addition of more Wallets\",\n        description:\n          \"MetaMask is the first wallet connector. Now we'll begin adding more options.\",\n        status: \"upcoming\",\n      },\n      {\n        name: \"User Submitted NFTs\",\n        description:\n          \"Allow users to post their own NFTs for sale in the marketplace.\",\n        status: \"upcoming\",\n      },\n    ],\n  },\n  {\n    heading: \"Q1\",\n    tasks: [\n      {\n        name: \"Bidding Service\",\n        description: \"Allow users to bid on NFTs in an auction style format.\",\n        status: \"upcoming\",\n      },\n    ],\n  },\n];\n","import { RoadmapItems } from \"./RoadmapItems\";\nexport default RoadmapItems;\n","import { CheckIcon } from \"@heroicons/react/solid\";\nimport classNames from \"../../utils/classNames\";\nimport { RoadmapSection } from \"../../typings/roadmap\";\n\nexport interface RoadmapItemsProps {\n  items: Array<RoadmapSection>;\n}\n\nexport function RoadmapItems({ items }: RoadmapItemsProps) {\n  return (\n    <nav aria-label='Progress'>\n      {items.map((step, stepIdx) => (\n        <div key={step.heading}>\n          <h2\n            className={`font-semibold text-lg pl-1 mb-4 dark:text-white ${\n              stepIdx !== 0 && \"mt-8\"\n            }`}>\n            {step.heading}\n          </h2>\n          <ol className='overflow-hidden'>\n            {step.tasks.map((task, taskIdx) => (\n              <li\n                key={task.name}\n                className={classNames(\n                  taskIdx !== step.tasks.length - 1 ? \"pb-10\" : \"\",\n                  \"relative\"\n                )}>\n                {task.status === \"complete\" ? (\n                  <>\n                    {taskIdx !== step.tasks.length - 1 ? (\n                      <div\n                        className='-ml-px absolute mt-0.5 top-4 left-4 w-0.5 h-full bg-blue-600'\n                        aria-hidden='true'\n                      />\n                    ) : null}\n                    <div className='relative flex items-start group'>\n                      <span className='h-9 flex items-center'>\n                        <span className='relative z-10 w-8 h-8 flex items-center justify-center bg-blue-600 rounded-full'>\n                          <CheckIcon\n                            className='w-5 h-5 text-white'\n                            aria-hidden='true'\n                          />\n                        </span>\n                      </span>\n                      <span className='ml-4 min-w-0 flex flex-col'>\n                        <span className='text-xs font-semibold tracking-wide uppercase dark:text-white'>\n                          {task.name}\n                        </span>\n                        <span className='text-sm text-gray-600 dark:text-gray-300'>\n                          {task.description}\n                        </span>\n                      </span>\n                    </div>\n                  </>\n                ) : task.status === \"current\" ? (\n                  <>\n                    {taskIdx !== step.tasks.length - 1 ? (\n                      <div\n                        className='-ml-px absolute mt-0.5 top-4 left-4 w-0.5 h-full bg-gray-300 dark:bg-gray-400'\n                        aria-hidden='true'\n                      />\n                    ) : null}\n                    <div\n                      className='relative flex items-start group'\n                      aria-current='step'>\n                      <span\n                        className='h-9 flex items-center'\n                        aria-hidden='true'>\n                        <span className='relative z-10 w-8 h-8 flex items-center justify-center bg-white border-2 border-blue-600 rounded-full'>\n                          <span className='h-2.5 w-2.5 bg-blue-600 rounded-full' />\n                        </span>\n                      </span>\n                      <span className='ml-4 min-w-0 flex flex-col'>\n                        <span className='text-xs font-semibold tracking-wide uppercase text-blue-600 dark:text-blue-500'>\n                          {task.name}\n                        </span>\n                        <span className='text-sm text-gray-500 dark:text-gray-400'>\n                          {task.description}\n                        </span>\n                      </span>\n                    </div>\n                  </>\n                ) : (\n                  <>\n                    {taskIdx !== step.tasks.length - 1 ? (\n                      <div\n                        className='-ml-px absolute mt-0.5 top-4 left-4 w-0.5 h-full bg-gray-300 dark:bg-gray-400'\n                        aria-hidden='true'\n                      />\n                    ) : null}\n                    <div className='relative flex items-start group'>\n                      <span\n                        className='h-9 flex items-center'\n                        aria-hidden='true'>\n                        <span className='relative z-10 w-8 h-8 flex items-center justify-center bg-white border-2 border-gray-300 dark:border-gray-400 rounded-full'>\n                          <span className='h-2.5 w-2.5 rounded-full bg-gray-300 dark:bg-gray-400' />\n                        </span>\n                      </span>\n                      <span className='ml-4 min-w-0 flex flex-col'>\n                        <span className='text-xs font-semibold tracking-wide uppercase text-gray-600 dark:text-gray-300'>\n                          {task.name}\n                        </span>\n                        <span className='text-sm text-gray-500 dark:text-gray-400'>\n                          {task.description}\n                        </span>\n                      </span>\n                    </div>\n                  </>\n                )}\n              </li>\n            ))}\n          </ol>\n        </div>\n      ))}\n    </nav>\n  );\n}\n","import AccountPage from \"./pages/AccountPage\";\nimport AssetPage from \"./pages/AssetPage\";\nimport CollectionsPage from \"./pages/CollectionsPage\";\nimport CollectionPage from \"./pages/CollectionPage\";\nimport CreatorPage from \"./pages/CreatorPage\";\nimport ExplorePage from \"./pages/ExplorePage\";\nimport FaqPage from \"./pages/FaqPage\";\nimport HomePage from \"./pages/HomePage\";\nimport MarketplacePage from \"./pages/MarketplacePage\";\nimport RoadmapPage from \"./pages/RoadmapPage\";\nimport * as paths from \"./constants/routes\";\n\nconst routes = [\n  {\n    path: paths.ROUTE_DEFAULT,\n    name: \"Home\",\n    Component: HomePage,\n    exact: true,\n  },\n  {\n    path: paths.ROUTE_MARKETPLACE,\n    name: \"Marketplace\",\n    Component: MarketplacePage,\n    exact: true,\n  },\n  {\n    path: paths.ROUTE_COLLECTIONS,\n    name: \"Collections\",\n    Component: CollectionsPage,\n    exact: true,\n  },\n  {\n    path: paths.ROUTE_COLLECTION,\n    name: \":contractAddress\",\n    Component: CollectionPage,\n    exact: true,\n  },\n  {\n    path: paths.ROUTE_COLLECTIBLE,\n    name: \":tokenId\",\n    Component: AssetPage,\n    exact: true,\n  },\n  {\n    path: paths.ROUTE_EXPLORE,\n    name: \"Explore\",\n    Component: ExplorePage,\n    exact: true,\n  },\n  {\n    path: paths.ROUTE_ACCOUNT,\n    name: \"Account\",\n    Component: AccountPage,\n    exact: true,\n  },\n  {\n    path: paths.ROUTE_CREATOR_DASHBOARD,\n    name: \"Create\",\n    Component: CreatorPage,\n    exact: true,\n  },\n  {\n    path: paths.ROUTE_ROADMAP,\n    name: \"Roadmap\",\n    Component: RoadmapPage,\n    exact: true,\n  },\n  { path: paths.ROUTE_FAQ, name: \"FAQ\", Component: FaqPage, exact: true },\n];\n\nexport default routes;\n","import { useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { NFT } from \"../../typings/nft\";\nimport { PureMarketplacePage } from \"./MarketplacePage\";\nimport { useAppDispatch, useAppSelector } from \"../../state/hooks\";\nimport { getAssets } from \"../../state/asyncActions/assets\";\n\nconst MarketplacePage = () => {\n  const { chainId } = useWeb3React<Web3Provider>();\n  const dispatch = useAppDispatch();\n  const assets = useAppSelector((state) => state.assets.data);\n  const loading = useAppSelector((state) => state.assets.loading);\n  const [verifiedOnly, onFilterVerified] = useState<boolean>(false);\n  const [items, setItems] = useState<Array<any>>([]);\n\n  useEffect(() => {\n    dispatch(getAssets());\n  }, [chainId]);\n\n  useEffect(() => {\n    if (assets?.status) {\n      // Return unsold items\n      // let filtered = assets.data.filter((asset: NFT) => !asset.sold);\n\n      // if (verifiedOnly) {\n      //   // Return items with Verified Contract\n      //   filtered = filtered.filter((asset: NFT) => asset.contractVerified);\n      // }\n\n      // Return unsold items, with optional Verified Contract\n      let filtered = assets.data.filter((asset: NFT) => {\n        return verifiedOnly ? asset.contractVerified && !asset.sold : !asset.sold;\n      });\n\n      setItems(filtered);\n    }\n  }, [assets, verifiedOnly]);\n\n  return <PureMarketplacePage items={items} loading={loading} verifiedOnly={verifiedOnly} onFilterVerified={onFilterVerified} />;\n};\n\nexport default MarketplacePage;\n","import {\n    getAssetsStarted, getAssetsSuccess, getAssetsFailure\n} from \"../actions/assets\";\nimport { assetsEndpoint } from '../../http';\n\n// get assets list\nexport const getAssets = () => async (dispatch: any) => {\n    dispatch(getAssetsStarted());\n    try {\n        const res = await fetch(assetsEndpoint);\n        const data = await res.json();\n        dispatch(getAssetsSuccess(data));\n\n    } catch (err: any) {\n        dispatch(getAssetsFailure(err.message));\n    }\n}\n","import { roadmap } from \"../../data/roadmap\";\nimport ContentWrapper from \"../../ContentWrapper\";\nimport RoadmapItems from \"../../components/RoadmapItems\";\n\nexport const RoadmapPage = () => {\n  return (\n    <ContentWrapper>\n      <section\n        aria-labelledby='primary-heading'\n        className='p-4 sm:p-8 max-w-8xl divide-y-2 divide-gray-200 dark:divide-gray-800'>\n        <h1 id='primary-heading' className='text-2xl font-bold'>\n          Roadmap\n        </h1>\n\n        <div className='mt-6 pt-6'>\n          <RoadmapItems items={roadmap} />\n        </div>\n      </section>\n    </ContentWrapper>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n// import { ThemeProvider } from \"styled-components\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport { useEagerConnect, useInactiveListener } from \"./hooks\";\nimport * as paths from \"./constants/routes\";\nimport Navbar from \"./components/Navbar\";\nimport Sidebar from \"./components/Sidebar\";\nimport routes from \"./routes\";\n\nimport \"./styles/tailwind.output.css\";\n\nexport default function App() {\n  const { connector } = useWeb3React<Web3Provider>();\n  const [miniSidebar, setMiniSidebar] = useState(false);\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = useState<any>();\n  useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined);\n    }\n  }, [activatingConnector, connector]);\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector);\n\n  return (\n    <Provider store={store}>\n      {/* @ts-ignore */}\n      {/* <ThemeProvider theme={preset}> */}\n      <div className='bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-white flex flex-row h-screen overflow-hidden'>\n        <Router>\n          <Sidebar\n            toggle={() => setMiniSidebar(!miniSidebar)}\n            mini={miniSidebar}\n          />\n\n          <div className='flex flex-col flex-1 min-h-0 overflow-hidden'>\n            <Navbar hideTitle={!miniSidebar} />\n\n            <Switch>\n              {routes.map(({ path, Component, exact }, key) => (\n                <Route\n                  path={path}\n                  component={Component}\n                  exact={exact}\n                  key={key}\n                />\n              ))}\n              <Redirect to={paths.ROUTE_DEFAULT} />\n            </Switch>\n          </div>\n        </Router>\n      </div>\n      {/* </ThemeProvider> */}\n    </Provider>\n  );\n}\n","import { useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"../connectors\";\n\nexport default function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React();\n\n  useEffect((): any => {\n    const { ethereum } = window as any;\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\");\n        activate(injected);\n      };\n      const handleChainChanged = (chainId: string | number) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId);\n        activate(injected);\n      };\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n      const handleNetworkChanged = (networkId: string | number) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId);\n        activate(injected);\n      };\n\n      ethereum.on(\"connect\", handleConnect);\n      ethereum.on(\"chainChanged\", handleChainChanged);\n      ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      ethereum.on(\"networkChanged\", handleNetworkChanged);\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener(\"connect\", handleConnect);\n          ethereum.removeListener(\"chainChanged\", handleChainChanged);\n          ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n          ethereum.removeListener(\"networkChanged\", handleNetworkChanged);\n        }\n      };\n    }\n  }, [active, error, suppress, activate]);\n}\n","import { useState, useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { injected } from \"../connectors\";\n\nexport default function useEagerConnect() {\n  const { activate, active } = useWeb3React();\n\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, []); // intentionally only running on mount (make sure it's only mounted once\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n\n  return tried;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createWeb3ReactRoot, Web3ReactProvider } from \"@web3-react/core\";\nimport { NetworkContextName } from \"./constants\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport getLibrary from \"./utils/getLibrary\";\nimport App from \"./App\";\n\nconst Web3ProviderNetwork = createWeb3ReactRoot(NetworkContextName);\n\nReactDOM.render(\n  <Web3ReactProvider getLibrary={getLibrary}>\n    <Web3ProviderNetwork getLibrary={getLibrary}>\n      <App />\n    </Web3ProviderNetwork>\n  </Web3ReactProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}